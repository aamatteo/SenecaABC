/* ------------------------------------------------------------------ */
/*      item            : SnapshotRequest.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "SnapshotRequest.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a SnapshotRequest object
static ::dueca::CommObjectMemberAccess
  <SnapshotRequest,bool >
  SnapshotRequest_member_makesnapshot(&SnapshotRequest::makesnapshot, "makesnapshot");

// assemble the above entries into a table in the order in which they
// appear in the SnapshotRequest object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &SnapshotRequest_member_makesnapshot },
  { NULL }
};

#endif

// class name, static
const char * const SnapshotRequest::classname = "SnapshotRequest";

// magic number, hashed from class name and member names / classes
const uint32_t SnapshotRequest::magic_check_number=0xf7ffb5be;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (SnapshotRequest::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<SnapshotRequest>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
SnapshotRequest::SnapshotRequest()
{
  DOBS("default constructor SnapshotRequest");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
SnapshotRequest::SnapshotRequest(
        const bool& makesnapshot) :
    makesnapshot(makesnapshot)
{
  DOBS("complete constructor SnapshotRequest");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
SnapshotRequest::SnapshotRequest(const SnapshotRequest& other):
    makesnapshot(other.makesnapshot)
{
  DOBS("copy constructor SnapshotRequest");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
SnapshotRequest::SnapshotRequest(dueca::AmorphReStore& s):
        makesnapshot(s)
{
  DOBS("amorph constructor SnapshotRequest");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
SnapshotRequest::~SnapshotRequest()
{
  DOBS("destructor SnapshotRequest");
}
#endif

#if !defined(__DCO_STANDALONE)
void* SnapshotRequest::operator new(size_t size)
{
  DOBS("operator new SnapshotRequest");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SnapshotRequest));
  return my_arena->alloc(size);
}

void SnapshotRequest::operator delete(void* v)
{
  DOBS("operator delete SnapshotRequest");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SnapshotRequest));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void SnapshotRequest::packDataDiff(::dueca::AmorphStore& s, const SnapshotRequest& ref) const
{
  DOBS("packDataDiff SnapshotRequest");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->makesnapshot, ref.makesnapshot,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void SnapshotRequest::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData SnapshotRequest");

  ::unPackData(s, this->makesnapshot);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void SnapshotRequest::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff SnapshotRequest");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->makesnapshot, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool SnapshotRequest::operator == (const SnapshotRequest& other) const
{
  DOBS("operator == SnapshotRequest");
  if (this->makesnapshot != other.makesnapshot) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
SnapshotRequest&
SnapshotRequest::operator=(const SnapshotRequest& other)
{
  DOBS("operator = SnapshotRequest");
  if (this == &other) return *this;
  this->makesnapshot = other.makesnapshot;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void SnapshotRequest::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData SnapshotRequest");
  ::packData(s, this->makesnapshot);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & SnapshotRequest::print(std::ostream& s) const
{
  s << "SnapshotRequest("
    << "makesnapshot=" << this->makesnapshot
    << ')';
  return s;
}
#endif


