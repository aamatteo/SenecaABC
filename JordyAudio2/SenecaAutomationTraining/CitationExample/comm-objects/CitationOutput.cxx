/* ------------------------------------------------------------------ */
/*      item            : CitationOutput.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "CitationOutput.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a CitationOutput object
static ::dueca::CommObjectMemberAccess
  <CitationOutput,dueca::fixvector<47,float> >
  CitationOutput_member_y(&CitationOutput::y, "y");

// assemble the above entries into a table in the order in which they
// appear in the CitationOutput object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &CitationOutput_member_y },
  { NULL }
};

#endif

// class name, static
const char * const CitationOutput::classname = "CitationOutput";

// magic number, hashed from class name and member names / classes
const uint32_t CitationOutput::magic_check_number=0xb109fff2;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (CitationOutput::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<CitationOutput>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
CitationOutput::CitationOutput()
{
  DOBS("default constructor CitationOutput");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
CitationOutput::CitationOutput(
        const dueca::fixvector<47,float>& y) :
    y(y)
{
  DOBS("complete constructor CitationOutput");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
CitationOutput::CitationOutput(const CitationOutput& other):
    y(other.y)
{
  DOBS("copy constructor CitationOutput");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
CitationOutput::CitationOutput(dueca::AmorphReStore& s)
{
  ::dueca::unpackiterable(s, this->y,
                          dueca::pack_traits<dueca::fixvector<47,float> >()); 
  DOBS("amorph constructor CitationOutput");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
CitationOutput::~CitationOutput()
{
  DOBS("destructor CitationOutput");
}
#endif

#if !defined(__DCO_STANDALONE)
void* CitationOutput::operator new(size_t size)
{
  DOBS("operator new CitationOutput");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(CitationOutput));
  return my_arena->alloc(size);
}

void CitationOutput::operator delete(void* v)
{
  DOBS("operator delete CitationOutput");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(CitationOutput));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void CitationOutput::packDataDiff(::dueca::AmorphStore& s, const CitationOutput& ref) const
{
  DOBS("packDataDiff CitationOutput");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffiterable(this->y, ref.y, s, im,
                          dueca::diffpack_traits<dueca::fixvector<47,float> >());
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void CitationOutput::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData CitationOutput");


  ::dueca::unpackiterable(s, this->y,
                          dueca::pack_traits<dueca::fixvector<47,float> >()); 
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void CitationOutput::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff CitationOutput");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffiterable(this->y, s, im,
                          dueca::diffpack_traits<dueca::fixvector<47,float> >());
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool CitationOutput::operator == (const CitationOutput& other) const
{
  DOBS("operator == CitationOutput");
  if (this->y != other.y) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
CitationOutput&
CitationOutput::operator=(const CitationOutput& other)
{
  DOBS("operator = CitationOutput");
  if (this == &other) return *this;
  this->y = other.y;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void CitationOutput::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData CitationOutput");
  ::dueca::packiterable(s, this->y,
                        dueca::pack_traits<dueca::fixvector<47,float> >()); 
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & CitationOutput::print(std::ostream& s) const
{
  s << "CitationOutput("
    << "y={";
  for (dueca::fixvector<47,float>::const_iterator ii = this->y.begin();
       ii != this->y.end(); ii++) {
    if (ii != this->y.begin()) s << ',';
    s << (*ii);
  }
  s << "}"
    << ')';
  return s;
}
#endif


