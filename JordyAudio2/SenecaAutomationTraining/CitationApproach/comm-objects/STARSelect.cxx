/* ------------------------------------------------------------------ */
/*      item            : STARSelect.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "STARSelect.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a STARSelect object
static ::dueca::CommObjectMemberAccess
  <STARSelect,vstring >
  STARSelect_member_name(&STARSelect::name, "name");

// assemble the above entries into a table in the order in which they
// appear in the STARSelect object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &STARSelect_member_name },
  { NULL }
};

#endif

// class name, static
const char * const STARSelect::classname = "STARSelect";

// magic number, hashed from class name and member names / classes
const uint32_t STARSelect::magic_check_number=0x1a87f042;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (STARSelect::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<STARSelect>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
STARSelect::STARSelect()
{
  DOBS("default constructor STARSelect");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
STARSelect::STARSelect(
        const vstring& name) :
    name(name)
{
  DOBS("complete constructor STARSelect");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
STARSelect::STARSelect(const STARSelect& other):
    name(other.name)
{
  DOBS("copy constructor STARSelect");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
STARSelect::STARSelect(dueca::AmorphReStore& s):
        name(s)
{
  DOBS("amorph constructor STARSelect");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
STARSelect::~STARSelect()
{
  DOBS("destructor STARSelect");
}
#endif

#if !defined(__DCO_STANDALONE)
void* STARSelect::operator new(size_t size)
{
  DOBS("operator new STARSelect");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(STARSelect));
  return my_arena->alloc(size);
}

void STARSelect::operator delete(void* v)
{
  DOBS("operator delete STARSelect");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(STARSelect));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void STARSelect::packDataDiff(::dueca::AmorphStore& s, const STARSelect& ref) const
{
  DOBS("packDataDiff STARSelect");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->name, ref.name,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void STARSelect::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData STARSelect");

  ::unPackData(s, this->name);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void STARSelect::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff STARSelect");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->name, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool STARSelect::operator == (const STARSelect& other) const
{
  DOBS("operator == STARSelect");
  if (this->name != other.name) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
STARSelect&
STARSelect::operator=(const STARSelect& other)
{
  DOBS("operator = STARSelect");
  if (this == &other) return *this;
  this->name = other.name;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void STARSelect::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData STARSelect");
  ::packData(s, this->name);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & STARSelect::print(std::ostream& s) const
{
  s << "STARSelect("
    << "name=" << this->name
    << ')';
  return s;
}
#endif


