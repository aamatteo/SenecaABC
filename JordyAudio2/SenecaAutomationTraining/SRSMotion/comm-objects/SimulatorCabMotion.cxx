/* ------------------------------------------------------------------ */
/*      item            : SimulatorCabMotion.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "SimulatorCabMotion.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a SimulatorCabMotion object
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_xdotdot(&SimulatorCabMotion::xdotdot, "xdotdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_ydotdot(&SimulatorCabMotion::ydotdot, "ydotdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_zdotdot(&SimulatorCabMotion::zdotdot, "zdotdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_fx(&SimulatorCabMotion::fx, "fx");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_fy(&SimulatorCabMotion::fy, "fy");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_fz(&SimulatorCabMotion::fz, "fz");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_xdot(&SimulatorCabMotion::xdot, "xdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_ydot(&SimulatorCabMotion::ydot, "ydot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_zdot(&SimulatorCabMotion::zdot, "zdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_pdot(&SimulatorCabMotion::pdot, "pdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_qdot(&SimulatorCabMotion::qdot, "qdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_rdot(&SimulatorCabMotion::rdot, "rdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_p(&SimulatorCabMotion::p, "p");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_q(&SimulatorCabMotion::q, "q");
static ::dueca::CommObjectMemberAccess
  <SimulatorCabMotion,double >
  SimulatorCabMotion_member_r(&SimulatorCabMotion::r, "r");

// assemble the above entries into a table in the order in which they
// appear in the SimulatorCabMotion object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &SimulatorCabMotion_member_xdotdot },
  { &SimulatorCabMotion_member_ydotdot },
  { &SimulatorCabMotion_member_zdotdot },
  { &SimulatorCabMotion_member_fx },
  { &SimulatorCabMotion_member_fy },
  { &SimulatorCabMotion_member_fz },
  { &SimulatorCabMotion_member_xdot },
  { &SimulatorCabMotion_member_ydot },
  { &SimulatorCabMotion_member_zdot },
  { &SimulatorCabMotion_member_pdot },
  { &SimulatorCabMotion_member_qdot },
  { &SimulatorCabMotion_member_rdot },
  { &SimulatorCabMotion_member_p },
  { &SimulatorCabMotion_member_q },
  { &SimulatorCabMotion_member_r },
  { NULL }
};

#endif

// class name, static
const char * const SimulatorCabMotion::classname = "SimulatorCabMotion";

// magic number, hashed from class name and member names / classes
const uint32_t SimulatorCabMotion::magic_check_number=0xd6e52576;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (SimulatorCabMotion::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<SimulatorCabMotion>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
SimulatorCabMotion::SimulatorCabMotion()
{
  DOBS("default constructor SimulatorCabMotion");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
SimulatorCabMotion::SimulatorCabMotion(
        const double& xdotdot,
        const double& ydotdot,
        const double& zdotdot,
        const double& fx,
        const double& fy,
        const double& fz,
        const double& xdot,
        const double& ydot,
        const double& zdot,
        const double& pdot,
        const double& qdot,
        const double& rdot,
        const double& p,
        const double& q,
        const double& r) :
    xdotdot(xdotdot),
    ydotdot(ydotdot),
    zdotdot(zdotdot),
    fx(fx),
    fy(fy),
    fz(fz),
    xdot(xdot),
    ydot(ydot),
    zdot(zdot),
    pdot(pdot),
    qdot(qdot),
    rdot(rdot),
    p(p),
    q(q),
    r(r)
{
  DOBS("complete constructor SimulatorCabMotion");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
SimulatorCabMotion::SimulatorCabMotion(const SimulatorCabMotion& other):
    xdotdot(other.xdotdot),
    ydotdot(other.ydotdot),
    zdotdot(other.zdotdot),
    fx(other.fx),
    fy(other.fy),
    fz(other.fz),
    xdot(other.xdot),
    ydot(other.ydot),
    zdot(other.zdot),
    pdot(other.pdot),
    qdot(other.qdot),
    rdot(other.rdot),
    p(other.p),
    q(other.q),
    r(other.r)
{
  DOBS("copy constructor SimulatorCabMotion");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
SimulatorCabMotion::SimulatorCabMotion(dueca::AmorphReStore& s):
        xdotdot(s),
        ydotdot(s),
        zdotdot(s),
        fx(s),
        fy(s),
        fz(s),
        xdot(s),
        ydot(s),
        zdot(s),
        pdot(s),
        qdot(s),
        rdot(s),
        p(s),
        q(s),
        r(s)
{
  DOBS("amorph constructor SimulatorCabMotion");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
SimulatorCabMotion::~SimulatorCabMotion()
{
  DOBS("destructor SimulatorCabMotion");
}
#endif

#if !defined(__DCO_STANDALONE)
void* SimulatorCabMotion::operator new(size_t size)
{
  DOBS("operator new SimulatorCabMotion");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SimulatorCabMotion));
  return my_arena->alloc(size);
}

void SimulatorCabMotion::operator delete(void* v)
{
  DOBS("operator delete SimulatorCabMotion");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SimulatorCabMotion));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void SimulatorCabMotion::packDataDiff(::dueca::AmorphStore& s, const SimulatorCabMotion& ref) const
{
  DOBS("packDataDiff SimulatorCabMotion");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->xdotdot, ref.xdotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ydotdot, ref.ydotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->zdotdot, ref.zdotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->fx, ref.fx,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->fy, ref.fy,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->fz, ref.fz,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->xdot, ref.xdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ydot, ref.ydot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->zdot, ref.zdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pdot, ref.pdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->qdot, ref.qdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->rdot, ref.rdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->p, ref.p,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->q, ref.q,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->r, ref.r,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void SimulatorCabMotion::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData SimulatorCabMotion");

  ::unPackData(s, this->xdotdot);
  ::unPackData(s, this->ydotdot);
  ::unPackData(s, this->zdotdot);
  ::unPackData(s, this->fx);
  ::unPackData(s, this->fy);
  ::unPackData(s, this->fz);
  ::unPackData(s, this->xdot);
  ::unPackData(s, this->ydot);
  ::unPackData(s, this->zdot);
  ::unPackData(s, this->pdot);
  ::unPackData(s, this->qdot);
  ::unPackData(s, this->rdot);
  ::unPackData(s, this->p);
  ::unPackData(s, this->q);
  ::unPackData(s, this->r);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void SimulatorCabMotion::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff SimulatorCabMotion");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->xdotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->ydotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->zdotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->fx, s, im);
  ::dueca::checkandunpackdiffsingle(this->fy, s, im);
  ::dueca::checkandunpackdiffsingle(this->fz, s, im);
  ::dueca::checkandunpackdiffsingle(this->xdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->ydot, s, im);
  ::dueca::checkandunpackdiffsingle(this->zdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->pdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->qdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->rdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->p, s, im);
  ::dueca::checkandunpackdiffsingle(this->q, s, im);
  ::dueca::checkandunpackdiffsingle(this->r, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool SimulatorCabMotion::operator == (const SimulatorCabMotion& other) const
{
  DOBS("operator == SimulatorCabMotion");
  if (this->xdotdot != other.xdotdot) return false;
  if (this->ydotdot != other.ydotdot) return false;
  if (this->zdotdot != other.zdotdot) return false;
  if (this->fx != other.fx) return false;
  if (this->fy != other.fy) return false;
  if (this->fz != other.fz) return false;
  if (this->xdot != other.xdot) return false;
  if (this->ydot != other.ydot) return false;
  if (this->zdot != other.zdot) return false;
  if (this->pdot != other.pdot) return false;
  if (this->qdot != other.qdot) return false;
  if (this->rdot != other.rdot) return false;
  if (this->p != other.p) return false;
  if (this->q != other.q) return false;
  if (this->r != other.r) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
SimulatorCabMotion&
SimulatorCabMotion::operator=(const SimulatorCabMotion& other)
{
  DOBS("operator = SimulatorCabMotion");
  if (this == &other) return *this;
  this->xdotdot = other.xdotdot;
  this->ydotdot = other.ydotdot;
  this->zdotdot = other.zdotdot;
  this->fx = other.fx;
  this->fy = other.fy;
  this->fz = other.fz;
  this->xdot = other.xdot;
  this->ydot = other.ydot;
  this->zdot = other.zdot;
  this->pdot = other.pdot;
  this->qdot = other.qdot;
  this->rdot = other.rdot;
  this->p = other.p;
  this->q = other.q;
  this->r = other.r;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void SimulatorCabMotion::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData SimulatorCabMotion");
  ::packData(s, this->xdotdot);
  ::packData(s, this->ydotdot);
  ::packData(s, this->zdotdot);
  ::packData(s, this->fx);
  ::packData(s, this->fy);
  ::packData(s, this->fz);
  ::packData(s, this->xdot);
  ::packData(s, this->ydot);
  ::packData(s, this->zdot);
  ::packData(s, this->pdot);
  ::packData(s, this->qdot);
  ::packData(s, this->rdot);
  ::packData(s, this->p);
  ::packData(s, this->q);
  ::packData(s, this->r);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & SimulatorCabMotion::print(std::ostream& s) const
{
  s << "SimulatorCabMotion("
    << "xdotdot=" << this->xdotdot << ','
    << "ydotdot=" << this->ydotdot << ','
    << "zdotdot=" << this->zdotdot << ','
    << "fx=" << this->fx << ','
    << "fy=" << this->fy << ','
    << "fz=" << this->fz << ','
    << "xdot=" << this->xdot << ','
    << "ydot=" << this->ydot << ','
    << "zdot=" << this->zdot << ','
    << "pdot=" << this->pdot << ','
    << "qdot=" << this->qdot << ','
    << "rdot=" << this->rdot << ','
    << "p=" << this->p << ','
    << "q=" << this->q << ','
    << "r=" << this->r
    << ')';
  return s;
}
#endif


