/* ------------------------------------------------------------------ */
/*      item            : AP2G1000Channel.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "AP2G1000Channel.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a AP2G1000Channel object
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_APstate(&AP2G1000Channel::APstate, "APstate");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_ap_vertical(&AP2G1000Channel::ap_vertical, "ap_vertical");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_ap_lateral(&AP2G1000Channel::ap_lateral, "ap_lateral");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_ap_armed(&AP2G1000Channel::ap_armed, "ap_armed");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_target_alt(&AP2G1000Channel::target_alt, "target_alt");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_target_speed(&AP2G1000Channel::target_speed, "target_speed");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_hdg_bug(&AP2G1000Channel::hdg_bug, "hdg_bug");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_target_vs(&AP2G1000Channel::target_vs, "target_vs");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_alt_hold(&AP2G1000Channel::alt_hold, "alt_hold");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,bool >
  AP2G1000Channel_member_ap_flash(&AP2G1000Channel::ap_flash, "ap_flash");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,bool >
  AP2G1000Channel_member_pit_flash(&AP2G1000Channel::pit_flash, "pit_flash");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,bool >
  AP2G1000Channel_member_rol_flash(&AP2G1000Channel::rol_flash, "rol_flash");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_active_nav_source(&AP2G1000Channel::active_nav_source, "active_nav_source");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_course(&AP2G1000Channel::course, "course");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_vnav_situation(&AP2G1000Channel::vnav_situation, "vnav_situation");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,float >
  AP2G1000Channel_member_altitude_target_vnav(&AP2G1000Channel::altitude_target_vnav, "altitude_target_vnav");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_active_leg(&AP2G1000Channel::active_leg, "active_leg");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_active_vnv_leg(&AP2G1000Channel::active_vnv_leg, "active_vnv_leg");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_alts_flash_state(&AP2G1000Channel::alts_flash_state, "alts_flash_state");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,int >
  AP2G1000Channel_member_alt_flash_state(&AP2G1000Channel::alt_flash_state, "alt_flash_state");
static ::dueca::CommObjectMemberAccess
  <AP2G1000Channel,bool >
  AP2G1000Channel_member_vor_flag_state(&AP2G1000Channel::vor_flag_state, "vor_flag_state");

// assemble the above entries into a table in the order in which they
// appear in the AP2G1000Channel object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &AP2G1000Channel_member_APstate },
  { &AP2G1000Channel_member_ap_vertical },
  { &AP2G1000Channel_member_ap_lateral },
  { &AP2G1000Channel_member_ap_armed },
  { &AP2G1000Channel_member_target_alt },
  { &AP2G1000Channel_member_target_speed },
  { &AP2G1000Channel_member_hdg_bug },
  { &AP2G1000Channel_member_target_vs },
  { &AP2G1000Channel_member_alt_hold },
  { &AP2G1000Channel_member_ap_flash },
  { &AP2G1000Channel_member_pit_flash },
  { &AP2G1000Channel_member_rol_flash },
  { &AP2G1000Channel_member_active_nav_source },
  { &AP2G1000Channel_member_course },
  { &AP2G1000Channel_member_vnav_situation },
  { &AP2G1000Channel_member_altitude_target_vnav },
  { &AP2G1000Channel_member_active_leg },
  { &AP2G1000Channel_member_active_vnv_leg },
  { &AP2G1000Channel_member_alts_flash_state },
  { &AP2G1000Channel_member_alt_flash_state },
  { &AP2G1000Channel_member_vor_flag_state },
  { NULL }
};

#endif

// class name, static
const char * const AP2G1000Channel::classname = "AP2G1000Channel";

// magic number, hashed from class name and member names / classes
const uint32_t AP2G1000Channel::magic_check_number=0xac41e5a9;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (AP2G1000Channel::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<AP2G1000Channel>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
AP2G1000Channel::AP2G1000Channel()
{
  DOBS("default constructor AP2G1000Channel");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
AP2G1000Channel::AP2G1000Channel(
        const int& APstate,
        const int& ap_vertical,
        const int& ap_lateral,
        const int& ap_armed,
        const float& target_alt,
        const float& target_speed,
        const float& hdg_bug,
        const float& target_vs,
        const float& alt_hold,
        const bool& ap_flash,
        const bool& pit_flash,
        const bool& rol_flash,
        const int& active_nav_source,
        const float& course,
        const int& vnav_situation,
        const float& altitude_target_vnav,
        const int& active_leg,
        const int& active_vnv_leg,
        const int& alts_flash_state,
        const int& alt_flash_state,
        const bool& vor_flag_state) :
    APstate(APstate),
    ap_vertical(ap_vertical),
    ap_lateral(ap_lateral),
    ap_armed(ap_armed),
    target_alt(target_alt),
    target_speed(target_speed),
    hdg_bug(hdg_bug),
    target_vs(target_vs),
    alt_hold(alt_hold),
    ap_flash(ap_flash),
    pit_flash(pit_flash),
    rol_flash(rol_flash),
    active_nav_source(active_nav_source),
    course(course),
    vnav_situation(vnav_situation),
    altitude_target_vnav(altitude_target_vnav),
    active_leg(active_leg),
    active_vnv_leg(active_vnv_leg),
    alts_flash_state(alts_flash_state),
    alt_flash_state(alt_flash_state),
    vor_flag_state(vor_flag_state)
{
  DOBS("complete constructor AP2G1000Channel");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
AP2G1000Channel::AP2G1000Channel(const AP2G1000Channel& other):
    APstate(other.APstate),
    ap_vertical(other.ap_vertical),
    ap_lateral(other.ap_lateral),
    ap_armed(other.ap_armed),
    target_alt(other.target_alt),
    target_speed(other.target_speed),
    hdg_bug(other.hdg_bug),
    target_vs(other.target_vs),
    alt_hold(other.alt_hold),
    ap_flash(other.ap_flash),
    pit_flash(other.pit_flash),
    rol_flash(other.rol_flash),
    active_nav_source(other.active_nav_source),
    course(other.course),
    vnav_situation(other.vnav_situation),
    altitude_target_vnav(other.altitude_target_vnav),
    active_leg(other.active_leg),
    active_vnv_leg(other.active_vnv_leg),
    alts_flash_state(other.alts_flash_state),
    alt_flash_state(other.alt_flash_state),
    vor_flag_state(other.vor_flag_state)
{
  DOBS("copy constructor AP2G1000Channel");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
AP2G1000Channel::AP2G1000Channel(dueca::AmorphReStore& s):
        APstate(s),
        ap_vertical(s),
        ap_lateral(s),
        ap_armed(s),
        target_alt(s),
        target_speed(s),
        hdg_bug(s),
        target_vs(s),
        alt_hold(s),
        ap_flash(s),
        pit_flash(s),
        rol_flash(s),
        active_nav_source(s),
        course(s),
        vnav_situation(s),
        altitude_target_vnav(s),
        active_leg(s),
        active_vnv_leg(s),
        alts_flash_state(s),
        alt_flash_state(s),
        vor_flag_state(s)
{
  DOBS("amorph constructor AP2G1000Channel");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
AP2G1000Channel::~AP2G1000Channel()
{
  DOBS("destructor AP2G1000Channel");
}
#endif

#if !defined(__DCO_STANDALONE)
void* AP2G1000Channel::operator new(size_t size)
{
  DOBS("operator new AP2G1000Channel");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(AP2G1000Channel));
  return my_arena->alloc(size);
}

void AP2G1000Channel::operator delete(void* v)
{
  DOBS("operator delete AP2G1000Channel");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(AP2G1000Channel));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void AP2G1000Channel::packDataDiff(::dueca::AmorphStore& s, const AP2G1000Channel& ref) const
{
  DOBS("packDataDiff AP2G1000Channel");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->APstate, ref.APstate,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ap_vertical, ref.ap_vertical,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ap_lateral, ref.ap_lateral,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ap_armed, ref.ap_armed,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->target_alt, ref.target_alt,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->target_speed, ref.target_speed,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->hdg_bug, ref.hdg_bug,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->target_vs, ref.target_vs,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->alt_hold, ref.alt_hold,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ap_flash, ref.ap_flash,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pit_flash, ref.pit_flash,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->rol_flash, ref.rol_flash,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->active_nav_source, ref.active_nav_source,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->course, ref.course,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->vnav_situation, ref.vnav_situation,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->altitude_target_vnav, ref.altitude_target_vnav,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->active_leg, ref.active_leg,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->active_vnv_leg, ref.active_vnv_leg,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->alts_flash_state, ref.alts_flash_state,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->alt_flash_state, ref.alt_flash_state,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->vor_flag_state, ref.vor_flag_state,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void AP2G1000Channel::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData AP2G1000Channel");

  ::unPackData(s, this->APstate);
  ::unPackData(s, this->ap_vertical);
  ::unPackData(s, this->ap_lateral);
  ::unPackData(s, this->ap_armed);
  ::unPackData(s, this->target_alt);
  ::unPackData(s, this->target_speed);
  ::unPackData(s, this->hdg_bug);
  ::unPackData(s, this->target_vs);
  ::unPackData(s, this->alt_hold);
  ::unPackData(s, this->ap_flash);
  ::unPackData(s, this->pit_flash);
  ::unPackData(s, this->rol_flash);
  ::unPackData(s, this->active_nav_source);
  ::unPackData(s, this->course);
  ::unPackData(s, this->vnav_situation);
  ::unPackData(s, this->altitude_target_vnav);
  ::unPackData(s, this->active_leg);
  ::unPackData(s, this->active_vnv_leg);
  ::unPackData(s, this->alts_flash_state);
  ::unPackData(s, this->alt_flash_state);
  ::unPackData(s, this->vor_flag_state);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void AP2G1000Channel::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff AP2G1000Channel");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->APstate, s, im);
  ::dueca::checkandunpackdiffsingle(this->ap_vertical, s, im);
  ::dueca::checkandunpackdiffsingle(this->ap_lateral, s, im);
  ::dueca::checkandunpackdiffsingle(this->ap_armed, s, im);
  ::dueca::checkandunpackdiffsingle(this->target_alt, s, im);
  ::dueca::checkandunpackdiffsingle(this->target_speed, s, im);
  ::dueca::checkandunpackdiffsingle(this->hdg_bug, s, im);
  ::dueca::checkandunpackdiffsingle(this->target_vs, s, im);
  ::dueca::checkandunpackdiffsingle(this->alt_hold, s, im);
  ::dueca::checkandunpackdiffsingle(this->ap_flash, s, im);
  ::dueca::checkandunpackdiffsingle(this->pit_flash, s, im);
  ::dueca::checkandunpackdiffsingle(this->rol_flash, s, im);
  ::dueca::checkandunpackdiffsingle(this->active_nav_source, s, im);
  ::dueca::checkandunpackdiffsingle(this->course, s, im);
  ::dueca::checkandunpackdiffsingle(this->vnav_situation, s, im);
  ::dueca::checkandunpackdiffsingle(this->altitude_target_vnav, s, im);
  ::dueca::checkandunpackdiffsingle(this->active_leg, s, im);
  ::dueca::checkandunpackdiffsingle(this->active_vnv_leg, s, im);
  ::dueca::checkandunpackdiffsingle(this->alts_flash_state, s, im);
  ::dueca::checkandunpackdiffsingle(this->alt_flash_state, s, im);
  ::dueca::checkandunpackdiffsingle(this->vor_flag_state, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool AP2G1000Channel::operator == (const AP2G1000Channel& other) const
{
  DOBS("operator == AP2G1000Channel");
  if (this->APstate != other.APstate) return false;
  if (this->ap_vertical != other.ap_vertical) return false;
  if (this->ap_lateral != other.ap_lateral) return false;
  if (this->ap_armed != other.ap_armed) return false;
  if (this->target_alt != other.target_alt) return false;
  if (this->target_speed != other.target_speed) return false;
  if (this->hdg_bug != other.hdg_bug) return false;
  if (this->target_vs != other.target_vs) return false;
  if (this->alt_hold != other.alt_hold) return false;
  if (this->ap_flash != other.ap_flash) return false;
  if (this->pit_flash != other.pit_flash) return false;
  if (this->rol_flash != other.rol_flash) return false;
  if (this->active_nav_source != other.active_nav_source) return false;
  if (this->course != other.course) return false;
  if (this->vnav_situation != other.vnav_situation) return false;
  if (this->altitude_target_vnav != other.altitude_target_vnav) return false;
  if (this->active_leg != other.active_leg) return false;
  if (this->active_vnv_leg != other.active_vnv_leg) return false;
  if (this->alts_flash_state != other.alts_flash_state) return false;
  if (this->alt_flash_state != other.alt_flash_state) return false;
  if (this->vor_flag_state != other.vor_flag_state) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
AP2G1000Channel&
AP2G1000Channel::operator=(const AP2G1000Channel& other)
{
  DOBS("operator = AP2G1000Channel");
  if (this == &other) return *this;
  this->APstate = other.APstate;
  this->ap_vertical = other.ap_vertical;
  this->ap_lateral = other.ap_lateral;
  this->ap_armed = other.ap_armed;
  this->target_alt = other.target_alt;
  this->target_speed = other.target_speed;
  this->hdg_bug = other.hdg_bug;
  this->target_vs = other.target_vs;
  this->alt_hold = other.alt_hold;
  this->ap_flash = other.ap_flash;
  this->pit_flash = other.pit_flash;
  this->rol_flash = other.rol_flash;
  this->active_nav_source = other.active_nav_source;
  this->course = other.course;
  this->vnav_situation = other.vnav_situation;
  this->altitude_target_vnav = other.altitude_target_vnav;
  this->active_leg = other.active_leg;
  this->active_vnv_leg = other.active_vnv_leg;
  this->alts_flash_state = other.alts_flash_state;
  this->alt_flash_state = other.alt_flash_state;
  this->vor_flag_state = other.vor_flag_state;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void AP2G1000Channel::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData AP2G1000Channel");
  ::packData(s, this->APstate);
  ::packData(s, this->ap_vertical);
  ::packData(s, this->ap_lateral);
  ::packData(s, this->ap_armed);
  ::packData(s, this->target_alt);
  ::packData(s, this->target_speed);
  ::packData(s, this->hdg_bug);
  ::packData(s, this->target_vs);
  ::packData(s, this->alt_hold);
  ::packData(s, this->ap_flash);
  ::packData(s, this->pit_flash);
  ::packData(s, this->rol_flash);
  ::packData(s, this->active_nav_source);
  ::packData(s, this->course);
  ::packData(s, this->vnav_situation);
  ::packData(s, this->altitude_target_vnav);
  ::packData(s, this->active_leg);
  ::packData(s, this->active_vnv_leg);
  ::packData(s, this->alts_flash_state);
  ::packData(s, this->alt_flash_state);
  ::packData(s, this->vor_flag_state);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & AP2G1000Channel::print(std::ostream& s) const
{
  s << "AP2G1000Channel("
    << "APstate=" << this->APstate << ','
    << "ap_vertical=" << this->ap_vertical << ','
    << "ap_lateral=" << this->ap_lateral << ','
    << "ap_armed=" << this->ap_armed << ','
    << "target_alt=" << this->target_alt << ','
    << "target_speed=" << this->target_speed << ','
    << "hdg_bug=" << this->hdg_bug << ','
    << "target_vs=" << this->target_vs << ','
    << "alt_hold=" << this->alt_hold << ','
    << "ap_flash=" << this->ap_flash << ','
    << "pit_flash=" << this->pit_flash << ','
    << "rol_flash=" << this->rol_flash << ','
    << "active_nav_source=" << this->active_nav_source << ','
    << "course=" << this->course << ','
    << "vnav_situation=" << this->vnav_situation << ','
    << "altitude_target_vnav=" << this->altitude_target_vnav << ','
    << "active_leg=" << this->active_leg << ','
    << "active_vnv_leg=" << this->active_vnv_leg << ','
    << "alts_flash_state=" << this->alts_flash_state << ','
    << "alt_flash_state=" << this->alt_flash_state << ','
    << "vor_flag_state=" << this->vor_flag_state
    << ')';
  return s;
}
#endif


