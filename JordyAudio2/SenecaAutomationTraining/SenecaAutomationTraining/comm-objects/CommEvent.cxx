/* ------------------------------------------------------------------ */
/*      item            : CommEvent.cxx
        generated by    : matteo (matteo)
        date            : Mon 31 Jan 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "CommEvent.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a CommEvent object
static ::dueca::CommObjectMemberAccess
  <CommEvent,int >
  CommEvent_member_radiocomm(&CommEvent::radiocomm, "radiocomm");

// assemble the above entries into a table in the order in which they
// appear in the CommEvent object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &CommEvent_member_radiocomm },
  { NULL }
};

#endif

// class name, static
const char * const CommEvent::classname = "CommEvent";

// magic number, hashed from class name and member names / classes
const uint32_t CommEvent::magic_check_number=0x91891048;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (CommEvent::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<CommEvent>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
CommEvent::CommEvent()
{
  DOBS("default constructor CommEvent");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
CommEvent::CommEvent(
        const int& radiocomm) :
    radiocomm(radiocomm)
{
  DOBS("complete constructor CommEvent");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
CommEvent::CommEvent(const CommEvent& other):
    radiocomm(other.radiocomm)
{
  DOBS("copy constructor CommEvent");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
CommEvent::CommEvent(dueca::AmorphReStore& s):
        radiocomm(s)
{
  DOBS("amorph constructor CommEvent");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
CommEvent::~CommEvent()
{
  DOBS("destructor CommEvent");
}
#endif

#if !defined(__DCO_STANDALONE)
void* CommEvent::operator new(size_t size)
{
  DOBS("operator new CommEvent");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(CommEvent));
  return my_arena->alloc(size);
}

void CommEvent::operator delete(void* v)
{
  DOBS("operator delete CommEvent");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(CommEvent));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void CommEvent::packDataDiff(::dueca::AmorphStore& s, const CommEvent& ref) const
{
  DOBS("packDataDiff CommEvent");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->radiocomm, ref.radiocomm,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void CommEvent::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData CommEvent");

  ::unPackData(s, this->radiocomm);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void CommEvent::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff CommEvent");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->radiocomm, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool CommEvent::operator == (const CommEvent& other) const
{
  DOBS("operator == CommEvent");
  if (this->radiocomm != other.radiocomm) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
CommEvent&
CommEvent::operator=(const CommEvent& other)
{
  DOBS("operator = CommEvent");
  if (this == &other) return *this;
  this->radiocomm = other.radiocomm;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void CommEvent::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData CommEvent");
  ::packData(s, this->radiocomm);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & CommEvent::print(std::ostream& s) const
{
  s << "CommEvent("
    << "radiocomm=" << this->radiocomm
    << ')';
  return s;
}
#endif


