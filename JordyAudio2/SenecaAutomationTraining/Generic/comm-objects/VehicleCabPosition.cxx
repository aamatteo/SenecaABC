/* ------------------------------------------------------------------ */
/*      item            : VehicleCabPosition.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "VehicleCabPosition.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a VehicleCabPosition object
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,double >
  VehicleCabPosition_member_x(&VehicleCabPosition::x, "x");
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,double >
  VehicleCabPosition_member_y(&VehicleCabPosition::y, "y");
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,double >
  VehicleCabPosition_member_z(&VehicleCabPosition::z, "z");
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,double >
  VehicleCabPosition_member_phi(&VehicleCabPosition::phi, "phi");
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,double >
  VehicleCabPosition_member_theta(&VehicleCabPosition::theta, "theta");
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,double >
  VehicleCabPosition_member_psi(&VehicleCabPosition::psi, "psi");
static ::dueca::CommObjectMemberAccess
  <VehicleCabPosition,int >
  VehicleCabPosition_member_test(&VehicleCabPosition::test, "test");

// assemble the above entries into a table in the order in which they
// appear in the VehicleCabPosition object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &VehicleCabPosition_member_x },
  { &VehicleCabPosition_member_y },
  { &VehicleCabPosition_member_z },
  { &VehicleCabPosition_member_phi },
  { &VehicleCabPosition_member_theta },
  { &VehicleCabPosition_member_psi },
  { &VehicleCabPosition_member_test },
  { NULL }
};

#endif

// class name, static
const char * const VehicleCabPosition::classname = "VehicleCabPosition";

// magic number, hashed from class name and member names / classes
const uint32_t VehicleCabPosition::magic_check_number=0x30cf3476;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (VehicleCabPosition::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<VehicleCabPosition>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
VehicleCabPosition::VehicleCabPosition()
{
  DOBS("default constructor VehicleCabPosition");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
VehicleCabPosition::VehicleCabPosition(
        const double& x,
        const double& y,
        const double& z,
        const double& phi,
        const double& theta,
        const double& psi,
        const int& test) :
    x(x),
    y(y),
    z(z),
    phi(phi),
    theta(theta),
    psi(psi),
    test(test)
{
  DOBS("complete constructor VehicleCabPosition");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
VehicleCabPosition::VehicleCabPosition(const VehicleCabPosition& other):
    x(other.x),
    y(other.y),
    z(other.z),
    phi(other.phi),
    theta(other.theta),
    psi(other.psi),
    test(other.test)
{
  DOBS("copy constructor VehicleCabPosition");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
VehicleCabPosition::VehicleCabPosition(dueca::AmorphReStore& s):
        x(s),
        y(s),
        z(s),
        phi(s),
        theta(s),
        psi(s),
        test(s)
{
  DOBS("amorph constructor VehicleCabPosition");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
VehicleCabPosition::~VehicleCabPosition()
{
  DOBS("destructor VehicleCabPosition");
}
#endif

#if !defined(__DCO_STANDALONE)
void* VehicleCabPosition::operator new(size_t size)
{
  DOBS("operator new VehicleCabPosition");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(VehicleCabPosition));
  return my_arena->alloc(size);
}

void VehicleCabPosition::operator delete(void* v)
{
  DOBS("operator delete VehicleCabPosition");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(VehicleCabPosition));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void VehicleCabPosition::packDataDiff(::dueca::AmorphStore& s, const VehicleCabPosition& ref) const
{
  DOBS("packDataDiff VehicleCabPosition");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->x, ref.x,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->y, ref.y,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->z, ref.z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->phi, ref.phi,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->theta, ref.theta,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->psi, ref.psi,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->test, ref.test,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void VehicleCabPosition::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData VehicleCabPosition");

  ::unPackData(s, this->x);
  ::unPackData(s, this->y);
  ::unPackData(s, this->z);
  ::unPackData(s, this->phi);
  ::unPackData(s, this->theta);
  ::unPackData(s, this->psi);
  ::unPackData(s, this->test);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void VehicleCabPosition::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff VehicleCabPosition");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->x, s, im);
  ::dueca::checkandunpackdiffsingle(this->y, s, im);
  ::dueca::checkandunpackdiffsingle(this->z, s, im);
  ::dueca::checkandunpackdiffsingle(this->phi, s, im);
  ::dueca::checkandunpackdiffsingle(this->theta, s, im);
  ::dueca::checkandunpackdiffsingle(this->psi, s, im);
  ::dueca::checkandunpackdiffsingle(this->test, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool VehicleCabPosition::operator == (const VehicleCabPosition& other) const
{
  DOBS("operator == VehicleCabPosition");
  if (this->x != other.x) return false;
  if (this->y != other.y) return false;
  if (this->z != other.z) return false;
  if (this->phi != other.phi) return false;
  if (this->theta != other.theta) return false;
  if (this->psi != other.psi) return false;
  if (this->test != other.test) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
VehicleCabPosition&
VehicleCabPosition::operator=(const VehicleCabPosition& other)
{
  DOBS("operator = VehicleCabPosition");
  if (this == &other) return *this;
  this->x = other.x;
  this->y = other.y;
  this->z = other.z;
  this->phi = other.phi;
  this->theta = other.theta;
  this->psi = other.psi;
  this->test = other.test;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void VehicleCabPosition::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData VehicleCabPosition");
  ::packData(s, this->x);
  ::packData(s, this->y);
  ::packData(s, this->z);
  ::packData(s, this->phi);
  ::packData(s, this->theta);
  ::packData(s, this->psi);
  ::packData(s, this->test);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & VehicleCabPosition::print(std::ostream& s) const
{
  s << "VehicleCabPosition("
    << "x=" << this->x << ','
    << "y=" << this->y << ','
    << "z=" << this->z << ','
    << "phi=" << this->phi << ','
    << "theta=" << this->theta << ','
    << "psi=" << this->psi << ','
    << "test=" << this->test
    << ')';
  return s;
}
#endif


