/* ------------------------------------------------------------------ */
/*      item            : PrimaryControls.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "PrimaryControls.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif
#ifdef DUECA_CONFIG_HDF5
#include <hdf5utils/HDF5Templates.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a PrimaryControls object
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_ux(&PrimaryControls::ux, "ux");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_uy(&PrimaryControls::uy, "uy");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_uz(&PrimaryControls::uz, "uz");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_uc(&PrimaryControls::uc, "uc");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Sx(&PrimaryControls::Sx, "Sx");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Sy(&PrimaryControls::Sy, "Sy");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Sz(&PrimaryControls::Sz, "Sz");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Sc(&PrimaryControls::Sc, "Sc");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_dSx(&PrimaryControls::dSx, "dSx");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_dSy(&PrimaryControls::dSy, "dSy");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_dSz(&PrimaryControls::dSz, "dSz");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_dSc(&PrimaryControls::dSc, "dSc");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Mx(&PrimaryControls::Mx, "Mx");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_My(&PrimaryControls::My, "My");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Mz(&PrimaryControls::Mz, "Mz");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_Mc(&PrimaryControls::Mc, "Mc");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_fbrake_left(&PrimaryControls::fbrake_left, "fbrake_left");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,float >
  PrimaryControls_member_fbrake_right(&PrimaryControls::fbrake_right, "fbrake_right");
static ::dueca::CommObjectMemberAccess
  <PrimaryControls,int32_t >
  PrimaryControls_member_test(&PrimaryControls::test, "test");

// assemble the above entries into a table in the order in which they
// appear in the PrimaryControls object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &PrimaryControls_member_ux },
  { &PrimaryControls_member_uy },
  { &PrimaryControls_member_uz },
  { &PrimaryControls_member_uc },
  { &PrimaryControls_member_Sx },
  { &PrimaryControls_member_Sy },
  { &PrimaryControls_member_Sz },
  { &PrimaryControls_member_Sc },
  { &PrimaryControls_member_dSx },
  { &PrimaryControls_member_dSy },
  { &PrimaryControls_member_dSz },
  { &PrimaryControls_member_dSc },
  { &PrimaryControls_member_Mx },
  { &PrimaryControls_member_My },
  { &PrimaryControls_member_Mz },
  { &PrimaryControls_member_Mc },
  { &PrimaryControls_member_fbrake_left },
  { &PrimaryControls_member_fbrake_right },
  { &PrimaryControls_member_test },
  { NULL }
};

#endif

// class name, static
const char * const PrimaryControls::classname = "PrimaryControls";

// magic number, hashed from class name and member names / classes
const uint32_t PrimaryControls::magic_check_number=0xfcf55184;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (PrimaryControls::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<PrimaryControls>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
PrimaryControls::PrimaryControls():
    ux(0.0f),
    uy(0.0f),
    uz(0.0f),
    uc(0.0f),
    Sx(0.0f),
    Sy(0.0f),
    Sz(0.0f),
    Sc(0.0f),
    dSx(0.0f),
    dSy(0.0f),
    dSz(0.0f),
    dSc(0.0f),
    Mx(0.0f),
    My(0.0f),
    Mz(0.0f),
    Mc(0.0f),
    fbrake_left(0.0f),
    fbrake_right(0.0f),
    test(0)
{
  DOBS("default constructor PrimaryControls");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
PrimaryControls::PrimaryControls(
        const float& ux,
        const float& uy,
        const float& uz,
        const float& uc,
        const float& Sx,
        const float& Sy,
        const float& Sz,
        const float& Sc,
        const float& dSx,
        const float& dSy,
        const float& dSz,
        const float& dSc,
        const float& Mx,
        const float& My,
        const float& Mz,
        const float& Mc,
        const float& fbrake_left,
        const float& fbrake_right,
        const int32_t& test) :
    ux(ux),
    uy(uy),
    uz(uz),
    uc(uc),
    Sx(Sx),
    Sy(Sy),
    Sz(Sz),
    Sc(Sc),
    dSx(dSx),
    dSy(dSy),
    dSz(dSz),
    dSc(dSc),
    Mx(Mx),
    My(My),
    Mz(Mz),
    Mc(Mc),
    fbrake_left(fbrake_left),
    fbrake_right(fbrake_right),
    test(test)
{
  DOBS("complete constructor PrimaryControls");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
PrimaryControls::PrimaryControls(const PrimaryControls& other):
    ux(other.ux),
    uy(other.uy),
    uz(other.uz),
    uc(other.uc),
    Sx(other.Sx),
    Sy(other.Sy),
    Sz(other.Sz),
    Sc(other.Sc),
    dSx(other.dSx),
    dSy(other.dSy),
    dSz(other.dSz),
    dSc(other.dSc),
    Mx(other.Mx),
    My(other.My),
    Mz(other.Mz),
    Mc(other.Mc),
    fbrake_left(other.fbrake_left),
    fbrake_right(other.fbrake_right),
    test(other.test)
{
  DOBS("copy constructor PrimaryControls");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
PrimaryControls::PrimaryControls(dueca::AmorphReStore& s):
        ux(s),
        uy(s),
        uz(s),
        uc(s),
        Sx(s),
        Sy(s),
        Sz(s),
        Sc(s),
        dSx(s),
        dSy(s),
        dSz(s),
        dSc(s),
        Mx(s),
        My(s),
        Mz(s),
        Mc(s),
        fbrake_left(s),
        fbrake_right(s),
        test(s)
{
  DOBS("amorph constructor PrimaryControls");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
PrimaryControls::~PrimaryControls()
{
  DOBS("destructor PrimaryControls");
}
#endif

#if !defined(__DCO_STANDALONE)
void* PrimaryControls::operator new(size_t size)
{
  DOBS("operator new PrimaryControls");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(PrimaryControls));
  return my_arena->alloc(size);
}

void PrimaryControls::operator delete(void* v)
{
  DOBS("operator delete PrimaryControls");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(PrimaryControls));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void PrimaryControls::packDataDiff(::dueca::AmorphStore& s, const PrimaryControls& ref) const
{
  DOBS("packDataDiff PrimaryControls");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->ux, ref.ux,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->uy, ref.uy,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->uz, ref.uz,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->uc, ref.uc,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Sx, ref.Sx,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Sy, ref.Sy,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Sz, ref.Sz,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Sc, ref.Sc,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->dSx, ref.dSx,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->dSy, ref.dSy,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->dSz, ref.dSz,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->dSc, ref.dSc,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Mx, ref.Mx,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->My, ref.My,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Mz, ref.Mz,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->Mc, ref.Mc,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->fbrake_left, ref.fbrake_left,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->fbrake_right, ref.fbrake_right,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->test, ref.test,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void PrimaryControls::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData PrimaryControls");

  ::unPackData(s, this->ux);
  ::unPackData(s, this->uy);
  ::unPackData(s, this->uz);
  ::unPackData(s, this->uc);
  ::unPackData(s, this->Sx);
  ::unPackData(s, this->Sy);
  ::unPackData(s, this->Sz);
  ::unPackData(s, this->Sc);
  ::unPackData(s, this->dSx);
  ::unPackData(s, this->dSy);
  ::unPackData(s, this->dSz);
  ::unPackData(s, this->dSc);
  ::unPackData(s, this->Mx);
  ::unPackData(s, this->My);
  ::unPackData(s, this->Mz);
  ::unPackData(s, this->Mc);
  ::unPackData(s, this->fbrake_left);
  ::unPackData(s, this->fbrake_right);
  ::unPackData(s, this->test);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void PrimaryControls::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff PrimaryControls");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->ux, s, im);
  ::dueca::checkandunpackdiffsingle(this->uy, s, im);
  ::dueca::checkandunpackdiffsingle(this->uz, s, im);
  ::dueca::checkandunpackdiffsingle(this->uc, s, im);
  ::dueca::checkandunpackdiffsingle(this->Sx, s, im);
  ::dueca::checkandunpackdiffsingle(this->Sy, s, im);
  ::dueca::checkandunpackdiffsingle(this->Sz, s, im);
  ::dueca::checkandunpackdiffsingle(this->Sc, s, im);
  ::dueca::checkandunpackdiffsingle(this->dSx, s, im);
  ::dueca::checkandunpackdiffsingle(this->dSy, s, im);
  ::dueca::checkandunpackdiffsingle(this->dSz, s, im);
  ::dueca::checkandunpackdiffsingle(this->dSc, s, im);
  ::dueca::checkandunpackdiffsingle(this->Mx, s, im);
  ::dueca::checkandunpackdiffsingle(this->My, s, im);
  ::dueca::checkandunpackdiffsingle(this->Mz, s, im);
  ::dueca::checkandunpackdiffsingle(this->Mc, s, im);
  ::dueca::checkandunpackdiffsingle(this->fbrake_left, s, im);
  ::dueca::checkandunpackdiffsingle(this->fbrake_right, s, im);
  ::dueca::checkandunpackdiffsingle(this->test, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool PrimaryControls::operator == (const PrimaryControls& other) const
{
  DOBS("operator == PrimaryControls");
  if (this->ux != other.ux) return false;
  if (this->uy != other.uy) return false;
  if (this->uz != other.uz) return false;
  if (this->uc != other.uc) return false;
  if (this->Sx != other.Sx) return false;
  if (this->Sy != other.Sy) return false;
  if (this->Sz != other.Sz) return false;
  if (this->Sc != other.Sc) return false;
  if (this->dSx != other.dSx) return false;
  if (this->dSy != other.dSy) return false;
  if (this->dSz != other.dSz) return false;
  if (this->dSc != other.dSc) return false;
  if (this->Mx != other.Mx) return false;
  if (this->My != other.My) return false;
  if (this->Mz != other.Mz) return false;
  if (this->Mc != other.Mc) return false;
  if (this->fbrake_left != other.fbrake_left) return false;
  if (this->fbrake_right != other.fbrake_right) return false;
  if (this->test != other.test) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
PrimaryControls&
PrimaryControls::operator=(const PrimaryControls& other)
{
  DOBS("operator = PrimaryControls");
  if (this == &other) return *this;
  this->ux = other.ux;
  this->uy = other.uy;
  this->uz = other.uz;
  this->uc = other.uc;
  this->Sx = other.Sx;
  this->Sy = other.Sy;
  this->Sz = other.Sz;
  this->Sc = other.Sc;
  this->dSx = other.dSx;
  this->dSy = other.dSy;
  this->dSz = other.dSz;
  this->dSc = other.dSc;
  this->Mx = other.Mx;
  this->My = other.My;
  this->Mz = other.Mz;
  this->Mc = other.Mc;
  this->fbrake_left = other.fbrake_left;
  this->fbrake_right = other.fbrake_right;
  this->test = other.test;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void PrimaryControls::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData PrimaryControls");
  ::packData(s, this->ux);
  ::packData(s, this->uy);
  ::packData(s, this->uz);
  ::packData(s, this->uc);
  ::packData(s, this->Sx);
  ::packData(s, this->Sy);
  ::packData(s, this->Sz);
  ::packData(s, this->Sc);
  ::packData(s, this->dSx);
  ::packData(s, this->dSy);
  ::packData(s, this->dSz);
  ::packData(s, this->dSc);
  ::packData(s, this->Mx);
  ::packData(s, this->My);
  ::packData(s, this->Mz);
  ::packData(s, this->Mc);
  ::packData(s, this->fbrake_left);
  ::packData(s, this->fbrake_right);
  ::packData(s, this->test);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & PrimaryControls::print(std::ostream& s) const
{
  s << "PrimaryControls("
    << "ux=" << this->ux << ','
    << "uy=" << this->uy << ','
    << "uz=" << this->uz << ','
    << "uc=" << this->uc << ','
    << "Sx=" << this->Sx << ','
    << "Sy=" << this->Sy << ','
    << "Sz=" << this->Sz << ','
    << "Sc=" << this->Sc << ','
    << "dSx=" << this->dSx << ','
    << "dSy=" << this->dSy << ','
    << "dSz=" << this->dSz << ','
    << "dSc=" << this->dSc << ','
    << "Mx=" << this->Mx << ','
    << "My=" << this->My << ','
    << "Mz=" << this->Mz << ','
    << "Mc=" << this->Mc << ','
    << "fbrake_left=" << this->fbrake_left << ','
    << "fbrake_right=" << this->fbrake_right << ','
    << "test=" << this->test
    << ')';
  return s;
}
#endif


#if defined(DUECA_CONFIG_HDF5)
// guarded in a separate namespace
namespace PrimaryControls_space {

#if !defined(__CUSTOM_HDF5_WRITE_FUNCTOR)
  HDF5DCOWriteFunctor::
  HDF5DCOWriteFunctor(boost::weak_ptr<H5::H5File> file,
                      const std::string& path,
                      size_t chunksize,
                      const std::string& label,
                      bool compress, bool writeticks,
                      const dueca::DataTimeSpec* startend) :
    dueca::hdf5log::HDF5DCOWriteFunctor(file, path, chunksize, label,
                               19, compress, writeticks,
                               startend)
  {
    // add memspaces for all elements

    this->configureDataSet(0, "/data/ux",
                           HOFFSET(PrimaryControls, ux),
                           dueca::get_hdf5_elt_type(example.ux),
                           dueca::get_hdf5_elt_length(example.ux));

    this->configureDataSet(1, "/data/uy",
                           HOFFSET(PrimaryControls, uy),
                           dueca::get_hdf5_elt_type(example.uy),
                           dueca::get_hdf5_elt_length(example.uy));

    this->configureDataSet(2, "/data/uz",
                           HOFFSET(PrimaryControls, uz),
                           dueca::get_hdf5_elt_type(example.uz),
                           dueca::get_hdf5_elt_length(example.uz));

    this->configureDataSet(3, "/data/uc",
                           HOFFSET(PrimaryControls, uc),
                           dueca::get_hdf5_elt_type(example.uc),
                           dueca::get_hdf5_elt_length(example.uc));

    this->configureDataSet(4, "/data/Sx",
                           HOFFSET(PrimaryControls, Sx),
                           dueca::get_hdf5_elt_type(example.Sx),
                           dueca::get_hdf5_elt_length(example.Sx));

    this->configureDataSet(5, "/data/Sy",
                           HOFFSET(PrimaryControls, Sy),
                           dueca::get_hdf5_elt_type(example.Sy),
                           dueca::get_hdf5_elt_length(example.Sy));

    this->configureDataSet(6, "/data/Sz",
                           HOFFSET(PrimaryControls, Sz),
                           dueca::get_hdf5_elt_type(example.Sz),
                           dueca::get_hdf5_elt_length(example.Sz));

    this->configureDataSet(7, "/data/Sc",
                           HOFFSET(PrimaryControls, Sc),
                           dueca::get_hdf5_elt_type(example.Sc),
                           dueca::get_hdf5_elt_length(example.Sc));

    this->configureDataSet(8, "/data/dSx",
                           HOFFSET(PrimaryControls, dSx),
                           dueca::get_hdf5_elt_type(example.dSx),
                           dueca::get_hdf5_elt_length(example.dSx));

    this->configureDataSet(9, "/data/dSy",
                           HOFFSET(PrimaryControls, dSy),
                           dueca::get_hdf5_elt_type(example.dSy),
                           dueca::get_hdf5_elt_length(example.dSy));

    this->configureDataSet(10, "/data/dSz",
                           HOFFSET(PrimaryControls, dSz),
                           dueca::get_hdf5_elt_type(example.dSz),
                           dueca::get_hdf5_elt_length(example.dSz));

    this->configureDataSet(11, "/data/dSc",
                           HOFFSET(PrimaryControls, dSc),
                           dueca::get_hdf5_elt_type(example.dSc),
                           dueca::get_hdf5_elt_length(example.dSc));

    this->configureDataSet(12, "/data/Mx",
                           HOFFSET(PrimaryControls, Mx),
                           dueca::get_hdf5_elt_type(example.Mx),
                           dueca::get_hdf5_elt_length(example.Mx));

    this->configureDataSet(13, "/data/My",
                           HOFFSET(PrimaryControls, My),
                           dueca::get_hdf5_elt_type(example.My),
                           dueca::get_hdf5_elt_length(example.My));

    this->configureDataSet(14, "/data/Mz",
                           HOFFSET(PrimaryControls, Mz),
                           dueca::get_hdf5_elt_type(example.Mz),
                           dueca::get_hdf5_elt_length(example.Mz));

    this->configureDataSet(15, "/data/Mc",
                           HOFFSET(PrimaryControls, Mc),
                           dueca::get_hdf5_elt_type(example.Mc),
                           dueca::get_hdf5_elt_length(example.Mc));

    this->configureDataSet(16, "/data/fbrake_left",
                           HOFFSET(PrimaryControls, fbrake_left),
                           dueca::get_hdf5_elt_type(example.fbrake_left),
                           dueca::get_hdf5_elt_length(example.fbrake_left));

    this->configureDataSet(17, "/data/fbrake_right",
                           HOFFSET(PrimaryControls, fbrake_right),
                           dueca::get_hdf5_elt_type(example.fbrake_right),
                           dueca::get_hdf5_elt_length(example.fbrake_right));

    this->configureDataSet(18, "/data/test",
                           HOFFSET(PrimaryControls, test),
                           dueca::get_hdf5_elt_type(example.test),
                           dueca::get_hdf5_elt_length(example.test));

    if (writeticks) {
      dueca::TimeTickType tex;
      this->configureDataSet(19, "/tick", 0,
                             dueca::get_hdf5_elt_type(tex), 1);
    }
  }

  // the functor member used by channel reading code, writes data in HDF5 file
  bool HDF5DCOWriteFunctor::operator() (const void* dpointer,
                                        const dueca::DataTimeSpec& ts)
  {
    while (ts.getValidityEnd() <= startend->getValidityStart()) {
      return true;
    }
    if (ts.getValidityStart() >= startend->getValidityEnd()) {
      return false;
    }
    this->prepareRow();

    this->sets[0].writeNew(dpointer, chunkidx, example.ux);

    this->sets[1].writeNew(dpointer, chunkidx, example.uy);

    this->sets[2].writeNew(dpointer, chunkidx, example.uz);

    this->sets[3].writeNew(dpointer, chunkidx, example.uc);

    this->sets[4].writeNew(dpointer, chunkidx, example.Sx);

    this->sets[5].writeNew(dpointer, chunkidx, example.Sy);

    this->sets[6].writeNew(dpointer, chunkidx, example.Sz);

    this->sets[7].writeNew(dpointer, chunkidx, example.Sc);

    this->sets[8].writeNew(dpointer, chunkidx, example.dSx);

    this->sets[9].writeNew(dpointer, chunkidx, example.dSy);

    this->sets[10].writeNew(dpointer, chunkidx, example.dSz);

    this->sets[11].writeNew(dpointer, chunkidx, example.dSc);

    this->sets[12].writeNew(dpointer, chunkidx, example.Mx);

    this->sets[13].writeNew(dpointer, chunkidx, example.My);

    this->sets[14].writeNew(dpointer, chunkidx, example.Mz);

    this->sets[15].writeNew(dpointer, chunkidx, example.Mc);

    this->sets[16].writeNew(dpointer, chunkidx, example.fbrake_left);

    this->sets[17].writeNew(dpointer, chunkidx, example.fbrake_right);

    this->sets[18].writeNew(dpointer, chunkidx, example.test);

    if (writeticks) {
      this->sets[19].writeNew(&ts);
    }
    return true;
  }
#endif


#if !defined(__CUSTOM_HDF5_READ_FUNCTOR)
  HDF5DCOReadFunctor::
  HDF5DCOReadFunctor(boost::weak_ptr<H5::H5File> file,
                     const std::string& path,
                     bool readticks) :
    dueca::hdf5log::HDF5DCOReadFunctor(file, path,
                              19, readticks)
  {
    // add memspaces for all elements

    this->configureDataSet(0, "/data/ux",
                           HOFFSET(PrimaryControls, ux),
                           dueca::get_hdf5_elt_type(example.ux),
                           dueca::get_hdf5_elt_length(example.ux));

    this->configureDataSet(1, "/data/uy",
                           HOFFSET(PrimaryControls, uy),
                           dueca::get_hdf5_elt_type(example.uy),
                           dueca::get_hdf5_elt_length(example.uy));

    this->configureDataSet(2, "/data/uz",
                           HOFFSET(PrimaryControls, uz),
                           dueca::get_hdf5_elt_type(example.uz),
                           dueca::get_hdf5_elt_length(example.uz));

    this->configureDataSet(3, "/data/uc",
                           HOFFSET(PrimaryControls, uc),
                           dueca::get_hdf5_elt_type(example.uc),
                           dueca::get_hdf5_elt_length(example.uc));

    this->configureDataSet(4, "/data/Sx",
                           HOFFSET(PrimaryControls, Sx),
                           dueca::get_hdf5_elt_type(example.Sx),
                           dueca::get_hdf5_elt_length(example.Sx));

    this->configureDataSet(5, "/data/Sy",
                           HOFFSET(PrimaryControls, Sy),
                           dueca::get_hdf5_elt_type(example.Sy),
                           dueca::get_hdf5_elt_length(example.Sy));

    this->configureDataSet(6, "/data/Sz",
                           HOFFSET(PrimaryControls, Sz),
                           dueca::get_hdf5_elt_type(example.Sz),
                           dueca::get_hdf5_elt_length(example.Sz));

    this->configureDataSet(7, "/data/Sc",
                           HOFFSET(PrimaryControls, Sc),
                           dueca::get_hdf5_elt_type(example.Sc),
                           dueca::get_hdf5_elt_length(example.Sc));

    this->configureDataSet(8, "/data/dSx",
                           HOFFSET(PrimaryControls, dSx),
                           dueca::get_hdf5_elt_type(example.dSx),
                           dueca::get_hdf5_elt_length(example.dSx));

    this->configureDataSet(9, "/data/dSy",
                           HOFFSET(PrimaryControls, dSy),
                           dueca::get_hdf5_elt_type(example.dSy),
                           dueca::get_hdf5_elt_length(example.dSy));

    this->configureDataSet(10, "/data/dSz",
                           HOFFSET(PrimaryControls, dSz),
                           dueca::get_hdf5_elt_type(example.dSz),
                           dueca::get_hdf5_elt_length(example.dSz));

    this->configureDataSet(11, "/data/dSc",
                           HOFFSET(PrimaryControls, dSc),
                           dueca::get_hdf5_elt_type(example.dSc),
                           dueca::get_hdf5_elt_length(example.dSc));

    this->configureDataSet(12, "/data/Mx",
                           HOFFSET(PrimaryControls, Mx),
                           dueca::get_hdf5_elt_type(example.Mx),
                           dueca::get_hdf5_elt_length(example.Mx));

    this->configureDataSet(13, "/data/My",
                           HOFFSET(PrimaryControls, My),
                           dueca::get_hdf5_elt_type(example.My),
                           dueca::get_hdf5_elt_length(example.My));

    this->configureDataSet(14, "/data/Mz",
                           HOFFSET(PrimaryControls, Mz),
                           dueca::get_hdf5_elt_type(example.Mz),
                           dueca::get_hdf5_elt_length(example.Mz));

    this->configureDataSet(15, "/data/Mc",
                           HOFFSET(PrimaryControls, Mc),
                           dueca::get_hdf5_elt_type(example.Mc),
                           dueca::get_hdf5_elt_length(example.Mc));

    this->configureDataSet(16, "/data/fbrake_left",
                           HOFFSET(PrimaryControls, fbrake_left),
                           dueca::get_hdf5_elt_type(example.fbrake_left),
                           dueca::get_hdf5_elt_length(example.fbrake_left));

    this->configureDataSet(17, "/data/fbrake_right",
                           HOFFSET(PrimaryControls, fbrake_right),
                           dueca::get_hdf5_elt_type(example.fbrake_right),
                           dueca::get_hdf5_elt_length(example.fbrake_right));

    this->configureDataSet(18, "/data/test",
                           HOFFSET(PrimaryControls, test),
                           dueca::get_hdf5_elt_type(example.test),
                           dueca::get_hdf5_elt_length(example.test));

    if (readticks) {
      dueca::TimeTickType tex;
      this->configureDataSet(19, "/tick", 0,
                             dueca::get_hdf5_elt_type(tex), 1);
    }
  }

  bool HDF5DCOReadFunctor::operator() (void* dpointer)
  {

    this->sets[0].readObjectPart(dpointer, example.ux);

    this->sets[1].readObjectPart(dpointer, example.uy);

    this->sets[2].readObjectPart(dpointer, example.uz);

    this->sets[3].readObjectPart(dpointer, example.uc);

    this->sets[4].readObjectPart(dpointer, example.Sx);

    this->sets[5].readObjectPart(dpointer, example.Sy);

    this->sets[6].readObjectPart(dpointer, example.Sz);

    this->sets[7].readObjectPart(dpointer, example.Sc);

    this->sets[8].readObjectPart(dpointer, example.dSx);

    this->sets[9].readObjectPart(dpointer, example.dSy);

    this->sets[10].readObjectPart(dpointer, example.dSz);

    this->sets[11].readObjectPart(dpointer, example.dSc);

    this->sets[12].readObjectPart(dpointer, example.Mx);

    this->sets[13].readObjectPart(dpointer, example.My);

    this->sets[14].readObjectPart(dpointer, example.Mz);

    this->sets[15].readObjectPart(dpointer, example.Mc);

    this->sets[16].readObjectPart(dpointer, example.fbrake_left);

    this->sets[17].readObjectPart(dpointer, example.fbrake_right);

    this->sets[18].readObjectPart(dpointer, example.test);

    return true;
  }
#endif


  /** Metafunctor, can be accessed through the table, and can
      produce a functor object and the HDF5 data type */
  class HDF5DCOMetaFunctor: public dueca::hdf5log::HDF5DCOMetaFunctor
  {
    HDF5DCOWriteFunctor* getWriteFunctor(boost::weak_ptr<H5::H5File> file,
                                         const std::string& path,
                                         size_t chunksize,
                                         const std::string& label,
                                         const dueca::DataTimeSpec* startend,
                                         bool compress,
                                         bool writeticks=true)
    {
      return new HDF5DCOWriteFunctor(file, path, chunksize, label,
                                     compress, writeticks, startend);
    }

    HDF5DCOReadFunctor* getReadFunctor(boost::weak_ptr<H5::H5File> file,
                                       const std::string& path,
                                       bool writeticks=true)
    {
      return new HDF5DCOReadFunctor(file, path, writeticks);
    }

  };

#if !defined(__DCO_STANDALONE)
  // loads the metafunctor in the table
  static dueca::LoadMetaFunctor<HDF5DCOMetaFunctor>
    load_functor(functortable, "hdf5");
#endif
} // end namespace PrimaryControls_space
#endif

