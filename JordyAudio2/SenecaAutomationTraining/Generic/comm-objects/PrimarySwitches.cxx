/* ------------------------------------------------------------------ */
/*      item            : PrimarySwitches.cxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "PrimarySwitches.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif
#ifdef DUECA_CONFIG_HDF5
#include <hdf5utils/HDF5Templates.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a PrimarySwitches object
static ::dueca::CommObjectMemberAccess
  <PrimarySwitches,bool >
  PrimarySwitches_member_xmit(&PrimarySwitches::xmit, "xmit");
static ::dueca::CommObjectMemberAccess
  <PrimarySwitches,bool >
  PrimarySwitches_member_trim_up(&PrimarySwitches::trim_up, "trim_up");
static ::dueca::CommObjectMemberAccess
  <PrimarySwitches,bool >
  PrimarySwitches_member_trim_down(&PrimarySwitches::trim_down, "trim_down");
static ::dueca::CommObjectMemberAccess
  <PrimarySwitches,bool >
  PrimarySwitches_member_AP_disconnect(&PrimarySwitches::AP_disconnect, "AP_disconnect");

// assemble the above entries into a table in the order in which they
// appear in the PrimarySwitches object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &PrimarySwitches_member_xmit },
  { &PrimarySwitches_member_trim_up },
  { &PrimarySwitches_member_trim_down },
  { &PrimarySwitches_member_AP_disconnect },
  { NULL }
};

#endif

// class name, static
const char * const PrimarySwitches::classname = "PrimarySwitches";

// magic number, hashed from class name and member names / classes
const uint32_t PrimarySwitches::magic_check_number=0x3abbc5d7;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (PrimarySwitches::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<PrimarySwitches>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
PrimarySwitches::PrimarySwitches():
    xmit(false),
    trim_up(false),
    trim_down(false),
    AP_disconnect(false)
{
  DOBS("default constructor PrimarySwitches");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
PrimarySwitches::PrimarySwitches(
        const bool& xmit,
        const bool& trim_up,
        const bool& trim_down,
        const bool& AP_disconnect) :
    xmit(xmit),
    trim_up(trim_up),
    trim_down(trim_down),
    AP_disconnect(AP_disconnect)
{
  DOBS("complete constructor PrimarySwitches");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
PrimarySwitches::PrimarySwitches(const PrimarySwitches& other):
    xmit(other.xmit),
    trim_up(other.trim_up),
    trim_down(other.trim_down),
    AP_disconnect(other.AP_disconnect)
{
  DOBS("copy constructor PrimarySwitches");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
PrimarySwitches::PrimarySwitches(dueca::AmorphReStore& s):
        xmit(s),
        trim_up(s),
        trim_down(s),
        AP_disconnect(s)
{
  DOBS("amorph constructor PrimarySwitches");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
PrimarySwitches::~PrimarySwitches()
{
  DOBS("destructor PrimarySwitches");
}
#endif

#if !defined(__DCO_STANDALONE)
void* PrimarySwitches::operator new(size_t size)
{
  DOBS("operator new PrimarySwitches");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(PrimarySwitches));
  return my_arena->alloc(size);
}

void PrimarySwitches::operator delete(void* v)
{
  DOBS("operator delete PrimarySwitches");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(PrimarySwitches));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void PrimarySwitches::packDataDiff(::dueca::AmorphStore& s, const PrimarySwitches& ref) const
{
  DOBS("packDataDiff PrimarySwitches");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->xmit, ref.xmit,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->trim_up, ref.trim_up,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->trim_down, ref.trim_down,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->AP_disconnect, ref.AP_disconnect,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void PrimarySwitches::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData PrimarySwitches");

  ::unPackData(s, this->xmit);
  ::unPackData(s, this->trim_up);
  ::unPackData(s, this->trim_down);
  ::unPackData(s, this->AP_disconnect);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void PrimarySwitches::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff PrimarySwitches");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->xmit, s, im);
  ::dueca::checkandunpackdiffsingle(this->trim_up, s, im);
  ::dueca::checkandunpackdiffsingle(this->trim_down, s, im);
  ::dueca::checkandunpackdiffsingle(this->AP_disconnect, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool PrimarySwitches::operator == (const PrimarySwitches& other) const
{
  DOBS("operator == PrimarySwitches");
  if (this->xmit != other.xmit) return false;
  if (this->trim_up != other.trim_up) return false;
  if (this->trim_down != other.trim_down) return false;
  if (this->AP_disconnect != other.AP_disconnect) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
PrimarySwitches&
PrimarySwitches::operator=(const PrimarySwitches& other)
{
  DOBS("operator = PrimarySwitches");
  if (this == &other) return *this;
  this->xmit = other.xmit;
  this->trim_up = other.trim_up;
  this->trim_down = other.trim_down;
  this->AP_disconnect = other.AP_disconnect;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void PrimarySwitches::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData PrimarySwitches");
  ::packData(s, this->xmit);
  ::packData(s, this->trim_up);
  ::packData(s, this->trim_down);
  ::packData(s, this->AP_disconnect);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & PrimarySwitches::print(std::ostream& s) const
{
  s << "PrimarySwitches("
    << "xmit=" << this->xmit << ','
    << "trim_up=" << this->trim_up << ','
    << "trim_down=" << this->trim_down << ','
    << "AP_disconnect=" << this->AP_disconnect
    << ')';
  return s;
}
#endif


#if defined(DUECA_CONFIG_HDF5)
// guarded in a separate namespace
namespace PrimarySwitches_space {

#if !defined(__CUSTOM_HDF5_WRITE_FUNCTOR)
  HDF5DCOWriteFunctor::
  HDF5DCOWriteFunctor(boost::weak_ptr<H5::H5File> file,
                      const std::string& path,
                      size_t chunksize,
                      const std::string& label,
                      bool compress, bool writeticks,
                      const dueca::DataTimeSpec* startend) :
    dueca::hdf5log::HDF5DCOWriteFunctor(file, path, chunksize, label,
                               4, compress, writeticks,
                               startend)
  {
    // add memspaces for all elements

    this->configureDataSet(0, "/data/xmit",
                           HOFFSET(PrimarySwitches, xmit),
                           dueca::get_hdf5_elt_type(example.xmit),
                           dueca::get_hdf5_elt_length(example.xmit));

    this->configureDataSet(1, "/data/trim_up",
                           HOFFSET(PrimarySwitches, trim_up),
                           dueca::get_hdf5_elt_type(example.trim_up),
                           dueca::get_hdf5_elt_length(example.trim_up));

    this->configureDataSet(2, "/data/trim_down",
                           HOFFSET(PrimarySwitches, trim_down),
                           dueca::get_hdf5_elt_type(example.trim_down),
                           dueca::get_hdf5_elt_length(example.trim_down));

    this->configureDataSet(3, "/data/AP_disconnect",
                           HOFFSET(PrimarySwitches, AP_disconnect),
                           dueca::get_hdf5_elt_type(example.AP_disconnect),
                           dueca::get_hdf5_elt_length(example.AP_disconnect));

    if (writeticks) {
      dueca::TimeTickType tex;
      this->configureDataSet(4, "/tick", 0,
                             dueca::get_hdf5_elt_type(tex), 1);
    }
  }

  // the functor member used by channel reading code, writes data in HDF5 file
  bool HDF5DCOWriteFunctor::operator() (const void* dpointer,
                                        const dueca::DataTimeSpec& ts)
  {
    while (ts.getValidityEnd() <= startend->getValidityStart()) {
      return true;
    }
    if (ts.getValidityStart() >= startend->getValidityEnd()) {
      return false;
    }
    this->prepareRow();

    this->sets[0].writeNew(dpointer, chunkidx, example.xmit);

    this->sets[1].writeNew(dpointer, chunkidx, example.trim_up);

    this->sets[2].writeNew(dpointer, chunkidx, example.trim_down);

    this->sets[3].writeNew(dpointer, chunkidx, example.AP_disconnect);

    if (writeticks) {
      this->sets[4].writeNew(&ts);
    }
    return true;
  }
#endif


#if !defined(__CUSTOM_HDF5_READ_FUNCTOR)
  HDF5DCOReadFunctor::
  HDF5DCOReadFunctor(boost::weak_ptr<H5::H5File> file,
                     const std::string& path,
                     bool readticks) :
    dueca::hdf5log::HDF5DCOReadFunctor(file, path,
                              4, readticks)
  {
    // add memspaces for all elements

    this->configureDataSet(0, "/data/xmit",
                           HOFFSET(PrimarySwitches, xmit),
                           dueca::get_hdf5_elt_type(example.xmit),
                           dueca::get_hdf5_elt_length(example.xmit));

    this->configureDataSet(1, "/data/trim_up",
                           HOFFSET(PrimarySwitches, trim_up),
                           dueca::get_hdf5_elt_type(example.trim_up),
                           dueca::get_hdf5_elt_length(example.trim_up));

    this->configureDataSet(2, "/data/trim_down",
                           HOFFSET(PrimarySwitches, trim_down),
                           dueca::get_hdf5_elt_type(example.trim_down),
                           dueca::get_hdf5_elt_length(example.trim_down));

    this->configureDataSet(3, "/data/AP_disconnect",
                           HOFFSET(PrimarySwitches, AP_disconnect),
                           dueca::get_hdf5_elt_type(example.AP_disconnect),
                           dueca::get_hdf5_elt_length(example.AP_disconnect));

    if (readticks) {
      dueca::TimeTickType tex;
      this->configureDataSet(4, "/tick", 0,
                             dueca::get_hdf5_elt_type(tex), 1);
    }
  }

  bool HDF5DCOReadFunctor::operator() (void* dpointer)
  {

    this->sets[0].readObjectPart(dpointer, example.xmit);

    this->sets[1].readObjectPart(dpointer, example.trim_up);

    this->sets[2].readObjectPart(dpointer, example.trim_down);

    this->sets[3].readObjectPart(dpointer, example.AP_disconnect);

    return true;
  }
#endif


  /** Metafunctor, can be accessed through the table, and can
      produce a functor object and the HDF5 data type */
  class HDF5DCOMetaFunctor: public dueca::hdf5log::HDF5DCOMetaFunctor
  {
    HDF5DCOWriteFunctor* getWriteFunctor(boost::weak_ptr<H5::H5File> file,
                                         const std::string& path,
                                         size_t chunksize,
                                         const std::string& label,
                                         const dueca::DataTimeSpec* startend,
                                         bool compress,
                                         bool writeticks=true)
    {
      return new HDF5DCOWriteFunctor(file, path, chunksize, label,
                                     compress, writeticks, startend);
    }

    HDF5DCOReadFunctor* getReadFunctor(boost::weak_ptr<H5::H5File> file,
                                       const std::string& path,
                                       bool writeticks=true)
    {
      return new HDF5DCOReadFunctor(file, path, writeticks);
    }

  };

#if !defined(__DCO_STANDALONE)
  // loads the metafunctor in the table
  static dueca::LoadMetaFunctor<HDF5DCOMetaFunctor>
    load_functor(functortable, "hdf5");
#endif
} // end namespace PrimarySwitches_space
#endif

