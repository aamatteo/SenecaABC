/* ------------------------------------------------------------------ */
/*      item            : VehicleCabPosition.hxx
        generated by    : matteo (matteo)
        date            : Wed 15 Dec 2021
        category        : header file
        description     : DUECA Communication Object (DCO)
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#ifndef VehicleCabPosition_hxx
#define VehicleCabPosition_hxx

#include <inttypes.h>

#if !defined(__DCO_NOPACK)
namespace dueca {
class AmorphStore;
class AmorphReStore;
struct DataWriterArraySize;
};
#endif
#if !defined(__DCO_STANDALONE)
namespace dueca {
struct CommObjectDataTable;
};
#include <gencodegen.h>
#if GENCODEGEN != 110
#error "Generated VehicleCabPosition.hxx too old, please clean with 'make mrproper'"
#endif
#include <CommObjectTraits.hxx>
#endif
#include <iostream>




/**cg corrected viewpoint position
   FROM CabinPositionCorrector
   TO VisualDisplayProxy
    */
struct VehicleCabPosition
{
  /** typedef for internal reference */
  typedef VehicleCabPosition __ThisDCOType__;

public:
  /** The name of this class. */
  static const char* const classname;


  /** A class member */
  double x;

  /** A class member */
  double y;

  /** A class member */
  double z;

  /** A class member */
  double phi;

  /** A class member */
  double theta;

  /** A class member */
  double psi;

  /** A class member */
  int test;

public:
  /** a "magic" number, hashed out of the class definition,
      that will be used to check consistency of the sent objects
      across the dueca nodes. */
  static const uint32_t magic_check_number;

  /** default constructor. */
  VehicleCabPosition();

  /** Constructor with arguments */
  VehicleCabPosition(
        const double& x,
        const double& y,
        const double& z,
        const double& phi,
        const double& theta,
        const double& psi,
        const int& test);

  /** copy constructor. */
  VehicleCabPosition(const VehicleCabPosition& o);

#if !defined(__DCO_NOPACK)
  /** constructor to restore an VehicleCabPosition from amorphous storage. */
  VehicleCabPosition(dueca::AmorphReStore& r);
#endif

  /** destructor. */
  ~VehicleCabPosition();

#if !defined(__DCO_STANDALONE)
  /** new operator "new", which places objects not on a
      heap, but in one of the memory arenas. This to speed up
      memory management. */
  static void* operator new(size_t size);

  /** new operator "delete", to go with the new version
      of operator new. */
  static void operator delete(void* p);

  /** placement "new", needed for stl. */
  inline static void* operator new(size_t size, VehicleCabPosition*& o)
  { return reinterpret_cast<void*>(o); }
#endif

#if !defined(__DCO_NOPACK)
  /** packs the VehicleCabPosition into amorphous storage. */
  void packData(::dueca::AmorphStore& s) const;

  /** packs the VehicleCabPosition into amorphous storage.
      only differences with a previous object are packed. */
  void packDataDiff(::dueca::AmorphStore& s, const VehicleCabPosition& ref) const;

  /** unpacks the VehicleCabPosition from an amorphous storage. */
  void unPackData(::dueca::AmorphReStore& s);

  /** unpacks the differences for VehicleCabPosition
      from an amorphous storage. */
  void unPackDataDiff(::dueca::AmorphReStore& s);
#endif

  /** Test for equality. */
  bool operator == (const VehicleCabPosition& o) const;

  /** Test for inequality. */
  inline bool operator != (const VehicleCabPosition& o) const
  { return !(*this == o); }

  /** Assignment operator. */
  VehicleCabPosition& operator=(const VehicleCabPosition& o);

  /** prints the VehicleCabPosition to a stream. */
  std::ostream & print(std::ostream& s) const;
};

#if !defined(__DCO_NOPACK)
/** pack the object into amorphous storage. */
inline void packData(::dueca::AmorphStore& s,
                     const VehicleCabPosition& o)
{ o.packData(s); }

/** pack the differences between this object and another
    into amorphous storage. */
inline void packDataDiff(dueca::AmorphStore& s,
                         const VehicleCabPosition& o,
                         const VehicleCabPosition& ref)
{ o.packDataDiff(s, ref); }

/** unpack the object from amorphous storage. */
inline void unPackData(::dueca::AmorphReStore& s,
                       VehicleCabPosition& o)
{ o.unPackData(s); }

/** unpack the differences to this object from storage. */
inline void unPackDataDiff(dueca::AmorphReStore& s,
                           VehicleCabPosition& o)
{ o.unPackDataDiff(s); }
#endif

namespace std {
/** print to a stream. */
inline std::ostream &
operator << (std::ostream& s, const VehicleCabPosition& o)
{ return o.print(s); }
};

#if !defined(__DCO_STANDALONE)
namespace dueca {
/** Template specialization, defines a trait that is needed if
    VehicleCabPosition is ever used inside other dco objects. */
template <>
struct dco_nested<VehicleCabPosition> : public dco_isnested { };
};
#endif


#endif
