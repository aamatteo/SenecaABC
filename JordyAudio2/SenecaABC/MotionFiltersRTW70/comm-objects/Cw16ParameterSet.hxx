/* ------------------------------------------------------------------ */
/*      item            : Cw16ParameterSet.hxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : header file
        description     : DUECA Communication Object (DCO)
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#ifndef Cw16ParameterSet_hxx
#define Cw16ParameterSet_hxx

#include <inttypes.h>

#if !defined(__DCO_NOPACK)
namespace dueca {
class AmorphStore;
class AmorphReStore;
struct DataWriterArraySize;
};
#endif
#if !defined(__DCO_STANDALONE)
namespace dueca {
struct CommObjectDataTable;
};
#include <gencodegen.h>
#if GENCODEGEN != 110
#error "Generated Cw16ParameterSet.hxx too old, please clean with 'make mrproper'"
#endif
#include <CommObjectTraits.hxx>
#endif
#include <iostream>


#if !defined(__DCO_STANDALONE)
#include <ParameterTable.hxx>
#endif


/** Defaults from Cw12
    */
struct Cw16ParameterSet
{
  /** typedef for internal reference */
  typedef Cw16ParameterSet __ThisDCOType__;

public:
  /** The name of this class. */
  static const char* const classname;


  /** A class member */
  int id;

  /** A class member */
  double tilt_coordination_method;

  /** A class member */
  double surge_gain;

  /** A class member */
  double surge_hp_wn;

  /** A class member */
  double surge_hp_z;

  /** A class member */
  double surge_hp_wb;

  /** A class member */
  double surge_lp_wn;

  /** A class member */
  double surge_lp_z;

  /** A class member */
  double sway_gain;

  /** A class member */
  double sway_hp_wn;

  /** A class member */
  double sway_hp_z;

  /** A class member */
  double sway_hp_wb;

  /** A class member */
  double sway_lp_wn;

  /** A class member */
  double sway_lp_z;

  /** A class member */
  double heave_gain;

  /** A class member */
  double heave_hp_wn;

  /** A class member */
  double heave_hp_z;

  /** A class member */
  double heave_hp_wb;

  /** A class member */
  double roll_gain;

  /** A class member */
  double roll_hp_wn;

  /** A class member */
  double roll_hp_z;

  /** A class member */
  double roll_hp_wb;

  /** A class member */
  double pitch_gain;

  /** A class member */
  double pitch_hp_wn;

  /** A class member */
  double pitch_hp_z;

  /** A class member */
  double pitch_hp_wb;

  /** A class member */
  double yaw_gain;

  /** A class member */
  double yaw_hp_wn;

  /** A class member */
  double yaw_hp_z;

  /** A class member */
  double yaw_hp_wb;

  /** turn surge tilt coordination on (1) or off (0) */
  double surge_tilt_gain;

  /** turn sway tilt coordination on (1) or off (0) */
  double sway_tilt_gain;

  /** tilt coordination rate limit [deg/s] */
  double tilt_rate_limit;

  /** reference points of input and filter, w.r.t. UGP */
  double ac_ref_pos_x;

  /** A class member */
  double ac_ref_pos_y;

  /** A class member */
  double ac_ref_pos_z;

  /** A class member */
  double filt_ref_pos_x;

  /** A class member */
  double filt_ref_pos_y;

  /** A class member */
  double filt_ref_pos_z;

  /** selection gains per channel (0 or 1) */
  double surge_selection_gain;

  /** A class member */
  double sway_selection_gain;

  /** A class member */
  double heave_selection_gain;

  /** A class member */
  double roll_selection_gain;

  /** A class member */
  double pitch_selection_gain;

  /** A class member */
  double yaw_selection_gain;

public:
  /** a "magic" number, hashed out of the class definition,
      that will be used to check consistency of the sent objects
      across the dueca nodes. */
  static const uint32_t magic_check_number;

  /** default constructor. */
  Cw16ParameterSet();

  /** Constructor with arguments */
  Cw16ParameterSet(
        const int& id,
        const double& tilt_coordination_method,
        const double& surge_gain,
        const double& surge_hp_wn,
        const double& surge_hp_z,
        const double& surge_hp_wb,
        const double& surge_lp_wn,
        const double& surge_lp_z,
        const double& sway_gain,
        const double& sway_hp_wn,
        const double& sway_hp_z,
        const double& sway_hp_wb,
        const double& sway_lp_wn,
        const double& sway_lp_z,
        const double& heave_gain,
        const double& heave_hp_wn,
        const double& heave_hp_z,
        const double& heave_hp_wb,
        const double& roll_gain,
        const double& roll_hp_wn,
        const double& roll_hp_z,
        const double& roll_hp_wb,
        const double& pitch_gain,
        const double& pitch_hp_wn,
        const double& pitch_hp_z,
        const double& pitch_hp_wb,
        const double& yaw_gain,
        const double& yaw_hp_wn,
        const double& yaw_hp_z,
        const double& yaw_hp_wb,
        const double& surge_tilt_gain,
        const double& sway_tilt_gain,
        const double& tilt_rate_limit,
        const double& ac_ref_pos_x,
        const double& ac_ref_pos_y,
        const double& ac_ref_pos_z,
        const double& filt_ref_pos_x,
        const double& filt_ref_pos_y,
        const double& filt_ref_pos_z,
        const double& surge_selection_gain,
        const double& sway_selection_gain,
        const double& heave_selection_gain,
        const double& roll_selection_gain,
        const double& pitch_selection_gain,
        const double& yaw_selection_gain);

  /** copy constructor. */
  Cw16ParameterSet(const Cw16ParameterSet& o);

#if !defined(__DCO_NOPACK)
  /** constructor to restore an Cw16ParameterSet from amorphous storage. */
  Cw16ParameterSet(dueca::AmorphReStore& r);
#endif

  /** destructor. */
  ~Cw16ParameterSet();

#if !defined(__DCO_STANDALONE)
  /** new operator "new", which places objects not on a
      heap, but in one of the memory arenas. This to speed up
      memory management. */
  static void* operator new(size_t size);

  /** new operator "delete", to go with the new version
      of operator new. */
  static void operator delete(void* p);

  /** placement "new", needed for stl. */
  inline static void* operator new(size_t size, Cw16ParameterSet*& o)
  { return reinterpret_cast<void*>(o); }
#endif

#if !defined(__DCO_NOPACK)
  /** packs the Cw16ParameterSet into amorphous storage. */
  void packData(::dueca::AmorphStore& s) const;

  /** packs the Cw16ParameterSet into amorphous storage.
      only differences with a previous object are packed. */
  void packDataDiff(::dueca::AmorphStore& s, const Cw16ParameterSet& ref) const;

  /** unpacks the Cw16ParameterSet from an amorphous storage. */
  void unPackData(::dueca::AmorphReStore& s);

  /** unpacks the differences for Cw16ParameterSet
      from an amorphous storage. */
  void unPackDataDiff(::dueca::AmorphReStore& s);
#endif

  /** Test for equality. */
  bool operator == (const Cw16ParameterSet& o) const;

  /** Test for inequality. */
  inline bool operator != (const Cw16ParameterSet& o) const
  { return !(*this == o); }

  /** Assignment operator. */
  Cw16ParameterSet& operator=(const Cw16ParameterSet& o);

  /** prints the Cw16ParameterSet to a stream. */
  std::ostream & print(std::ostream& s) const;
  /** Obtain a pointer to the parameter table. */
  static const dueca::ParameterTable* getParameterTable();
            
};

#if !defined(__DCO_NOPACK)
/** pack the object into amorphous storage. */
inline void packData(::dueca::AmorphStore& s,
                     const Cw16ParameterSet& o)
{ o.packData(s); }

/** pack the differences between this object and another
    into amorphous storage. */
inline void packDataDiff(dueca::AmorphStore& s,
                         const Cw16ParameterSet& o,
                         const Cw16ParameterSet& ref)
{ o.packDataDiff(s, ref); }

/** unpack the object from amorphous storage. */
inline void unPackData(::dueca::AmorphReStore& s,
                       Cw16ParameterSet& o)
{ o.unPackData(s); }

/** unpack the differences to this object from storage. */
inline void unPackDataDiff(dueca::AmorphReStore& s,
                           Cw16ParameterSet& o)
{ o.unPackDataDiff(s); }
#endif

namespace std {
/** print to a stream. */
inline std::ostream &
operator << (std::ostream& s, const Cw16ParameterSet& o)
{ return o.print(s); }
};

#if !defined(__DCO_STANDALONE)
namespace dueca {
/** Template specialization, defines a trait that is needed if
    Cw16ParameterSet is ever used inside other dco objects. */
template <>
struct dco_nested<Cw16ParameterSet> : public dco_isnested { };
};
#endif


#endif
