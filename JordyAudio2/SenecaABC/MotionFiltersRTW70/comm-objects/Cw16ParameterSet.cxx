/* ------------------------------------------------------------------ */
/*      item            : Cw16ParameterSet.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "Cw16ParameterSet.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <VarProbe.hxx>
#include <MemberCall.hxx>
#include <MemberCall2Way.hxx>
#include <CoreCreator.hxx>
#include <ScriptCreatableDataHolder.hxx>
#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a Cw16ParameterSet object
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,int >
  Cw16ParameterSet_member_id(&Cw16ParameterSet::id, "id");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_tilt_coordination_method(&Cw16ParameterSet::tilt_coordination_method, "tilt_coordination_method");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_gain(&Cw16ParameterSet::surge_gain, "surge_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_hp_wn(&Cw16ParameterSet::surge_hp_wn, "surge_hp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_hp_z(&Cw16ParameterSet::surge_hp_z, "surge_hp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_hp_wb(&Cw16ParameterSet::surge_hp_wb, "surge_hp_wb");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_lp_wn(&Cw16ParameterSet::surge_lp_wn, "surge_lp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_lp_z(&Cw16ParameterSet::surge_lp_z, "surge_lp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_gain(&Cw16ParameterSet::sway_gain, "sway_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_hp_wn(&Cw16ParameterSet::sway_hp_wn, "sway_hp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_hp_z(&Cw16ParameterSet::sway_hp_z, "sway_hp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_hp_wb(&Cw16ParameterSet::sway_hp_wb, "sway_hp_wb");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_lp_wn(&Cw16ParameterSet::sway_lp_wn, "sway_lp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_lp_z(&Cw16ParameterSet::sway_lp_z, "sway_lp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_heave_gain(&Cw16ParameterSet::heave_gain, "heave_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_heave_hp_wn(&Cw16ParameterSet::heave_hp_wn, "heave_hp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_heave_hp_z(&Cw16ParameterSet::heave_hp_z, "heave_hp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_heave_hp_wb(&Cw16ParameterSet::heave_hp_wb, "heave_hp_wb");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_roll_gain(&Cw16ParameterSet::roll_gain, "roll_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_roll_hp_wn(&Cw16ParameterSet::roll_hp_wn, "roll_hp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_roll_hp_z(&Cw16ParameterSet::roll_hp_z, "roll_hp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_roll_hp_wb(&Cw16ParameterSet::roll_hp_wb, "roll_hp_wb");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_pitch_gain(&Cw16ParameterSet::pitch_gain, "pitch_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_pitch_hp_wn(&Cw16ParameterSet::pitch_hp_wn, "pitch_hp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_pitch_hp_z(&Cw16ParameterSet::pitch_hp_z, "pitch_hp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_pitch_hp_wb(&Cw16ParameterSet::pitch_hp_wb, "pitch_hp_wb");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_yaw_gain(&Cw16ParameterSet::yaw_gain, "yaw_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_yaw_hp_wn(&Cw16ParameterSet::yaw_hp_wn, "yaw_hp_wn");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_yaw_hp_z(&Cw16ParameterSet::yaw_hp_z, "yaw_hp_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_yaw_hp_wb(&Cw16ParameterSet::yaw_hp_wb, "yaw_hp_wb");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_tilt_gain(&Cw16ParameterSet::surge_tilt_gain, "surge_tilt_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_tilt_gain(&Cw16ParameterSet::sway_tilt_gain, "sway_tilt_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_tilt_rate_limit(&Cw16ParameterSet::tilt_rate_limit, "tilt_rate_limit");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_ac_ref_pos_x(&Cw16ParameterSet::ac_ref_pos_x, "ac_ref_pos_x");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_ac_ref_pos_y(&Cw16ParameterSet::ac_ref_pos_y, "ac_ref_pos_y");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_ac_ref_pos_z(&Cw16ParameterSet::ac_ref_pos_z, "ac_ref_pos_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_filt_ref_pos_x(&Cw16ParameterSet::filt_ref_pos_x, "filt_ref_pos_x");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_filt_ref_pos_y(&Cw16ParameterSet::filt_ref_pos_y, "filt_ref_pos_y");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_filt_ref_pos_z(&Cw16ParameterSet::filt_ref_pos_z, "filt_ref_pos_z");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_surge_selection_gain(&Cw16ParameterSet::surge_selection_gain, "surge_selection_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_sway_selection_gain(&Cw16ParameterSet::sway_selection_gain, "sway_selection_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_heave_selection_gain(&Cw16ParameterSet::heave_selection_gain, "heave_selection_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_roll_selection_gain(&Cw16ParameterSet::roll_selection_gain, "roll_selection_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_pitch_selection_gain(&Cw16ParameterSet::pitch_selection_gain, "pitch_selection_gain");
static ::dueca::CommObjectMemberAccess
  <Cw16ParameterSet,double >
  Cw16ParameterSet_member_yaw_selection_gain(&Cw16ParameterSet::yaw_selection_gain, "yaw_selection_gain");

// assemble the above entries into a table in the order in which they
// appear in the Cw16ParameterSet object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &Cw16ParameterSet_member_id },
  { &Cw16ParameterSet_member_tilt_coordination_method },
  { &Cw16ParameterSet_member_surge_gain },
  { &Cw16ParameterSet_member_surge_hp_wn },
  { &Cw16ParameterSet_member_surge_hp_z },
  { &Cw16ParameterSet_member_surge_hp_wb },
  { &Cw16ParameterSet_member_surge_lp_wn },
  { &Cw16ParameterSet_member_surge_lp_z },
  { &Cw16ParameterSet_member_sway_gain },
  { &Cw16ParameterSet_member_sway_hp_wn },
  { &Cw16ParameterSet_member_sway_hp_z },
  { &Cw16ParameterSet_member_sway_hp_wb },
  { &Cw16ParameterSet_member_sway_lp_wn },
  { &Cw16ParameterSet_member_sway_lp_z },
  { &Cw16ParameterSet_member_heave_gain },
  { &Cw16ParameterSet_member_heave_hp_wn },
  { &Cw16ParameterSet_member_heave_hp_z },
  { &Cw16ParameterSet_member_heave_hp_wb },
  { &Cw16ParameterSet_member_roll_gain },
  { &Cw16ParameterSet_member_roll_hp_wn },
  { &Cw16ParameterSet_member_roll_hp_z },
  { &Cw16ParameterSet_member_roll_hp_wb },
  { &Cw16ParameterSet_member_pitch_gain },
  { &Cw16ParameterSet_member_pitch_hp_wn },
  { &Cw16ParameterSet_member_pitch_hp_z },
  { &Cw16ParameterSet_member_pitch_hp_wb },
  { &Cw16ParameterSet_member_yaw_gain },
  { &Cw16ParameterSet_member_yaw_hp_wn },
  { &Cw16ParameterSet_member_yaw_hp_z },
  { &Cw16ParameterSet_member_yaw_hp_wb },
  { &Cw16ParameterSet_member_surge_tilt_gain },
  { &Cw16ParameterSet_member_sway_tilt_gain },
  { &Cw16ParameterSet_member_tilt_rate_limit },
  { &Cw16ParameterSet_member_ac_ref_pos_x },
  { &Cw16ParameterSet_member_ac_ref_pos_y },
  { &Cw16ParameterSet_member_ac_ref_pos_z },
  { &Cw16ParameterSet_member_filt_ref_pos_x },
  { &Cw16ParameterSet_member_filt_ref_pos_y },
  { &Cw16ParameterSet_member_filt_ref_pos_z },
  { &Cw16ParameterSet_member_surge_selection_gain },
  { &Cw16ParameterSet_member_sway_selection_gain },
  { &Cw16ParameterSet_member_heave_selection_gain },
  { &Cw16ParameterSet_member_roll_selection_gain },
  { &Cw16ParameterSet_member_pitch_selection_gain },
  { &Cw16ParameterSet_member_yaw_selection_gain },
  { NULL }
};

#endif

// class name, static
const char * const Cw16ParameterSet::classname = "Cw16ParameterSet";

// magic number, hashed from class name and member names / classes
const uint32_t Cw16ParameterSet::magic_check_number=0x2304bf01;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (Cw16ParameterSet::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<Cw16ParameterSet>());

#if !defined(__DCO_STANDALONE)

#if defined(SCRIPT_PYTHON)
inline const char* TABNAME(const char* n) { return &(n[4]); }
#else
inline const char* TABNAME(const char* n) { return n; }
#endif

// Parameters to be inserted
const dueca::ParameterTable* Cw16ParameterSet::getParameterTable()
{
  static const dueca::ParameterTable parameter_table[] = {

    { TABNAME("set-id"),
      new VarProbe<Cw16ParameterSet,int >(&Cw16ParameterSet::id),
      "A class member" },
    { TABNAME("set-tilt-coordination-method"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::tilt_coordination_method),
      "A class member" },
    { TABNAME("set-surge-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_gain),
      "A class member" },
    { TABNAME("set-surge-hp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_hp_wn),
      "A class member" },
    { TABNAME("set-surge-hp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_hp_z),
      "A class member" },
    { TABNAME("set-surge-hp-wb"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_hp_wb),
      "A class member" },
    { TABNAME("set-surge-lp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_lp_wn),
      "A class member" },
    { TABNAME("set-surge-lp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_lp_z),
      "A class member" },
    { TABNAME("set-sway-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_gain),
      "A class member" },
    { TABNAME("set-sway-hp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_hp_wn),
      "A class member" },
    { TABNAME("set-sway-hp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_hp_z),
      "A class member" },
    { TABNAME("set-sway-hp-wb"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_hp_wb),
      "A class member" },
    { TABNAME("set-sway-lp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_lp_wn),
      "A class member" },
    { TABNAME("set-sway-lp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_lp_z),
      "A class member" },
    { TABNAME("set-heave-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::heave_gain),
      "A class member" },
    { TABNAME("set-heave-hp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::heave_hp_wn),
      "A class member" },
    { TABNAME("set-heave-hp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::heave_hp_z),
      "A class member" },
    { TABNAME("set-heave-hp-wb"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::heave_hp_wb),
      "A class member" },
    { TABNAME("set-roll-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::roll_gain),
      "A class member" },
    { TABNAME("set-roll-hp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::roll_hp_wn),
      "A class member" },
    { TABNAME("set-roll-hp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::roll_hp_z),
      "A class member" },
    { TABNAME("set-roll-hp-wb"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::roll_hp_wb),
      "A class member" },
    { TABNAME("set-pitch-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::pitch_gain),
      "A class member" },
    { TABNAME("set-pitch-hp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::pitch_hp_wn),
      "A class member" },
    { TABNAME("set-pitch-hp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::pitch_hp_z),
      "A class member" },
    { TABNAME("set-pitch-hp-wb"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::pitch_hp_wb),
      "A class member" },
    { TABNAME("set-yaw-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::yaw_gain),
      "A class member" },
    { TABNAME("set-yaw-hp-wn"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::yaw_hp_wn),
      "A class member" },
    { TABNAME("set-yaw-hp-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::yaw_hp_z),
      "A class member" },
    { TABNAME("set-yaw-hp-wb"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::yaw_hp_wb),
      "A class member" },
    { TABNAME("set-surge-tilt-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_tilt_gain),
      "turn surge tilt coordination on (1) or off (0)" },
    { TABNAME("set-sway-tilt-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_tilt_gain),
      "turn sway tilt coordination on (1) or off (0)" },
    { TABNAME("set-tilt-rate-limit"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::tilt_rate_limit),
      "tilt coordination rate limit [deg/s]" },
    { TABNAME("set-ac-ref-pos-x"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::ac_ref_pos_x),
      "reference points of input and filter, w.r.t. UGP" },
    { TABNAME("set-ac-ref-pos-y"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::ac_ref_pos_y),
      "A class member" },
    { TABNAME("set-ac-ref-pos-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::ac_ref_pos_z),
      "A class member" },
    { TABNAME("set-filt-ref-pos-x"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::filt_ref_pos_x),
      "A class member" },
    { TABNAME("set-filt-ref-pos-y"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::filt_ref_pos_y),
      "A class member" },
    { TABNAME("set-filt-ref-pos-z"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::filt_ref_pos_z),
      "A class member" },
    { TABNAME("set-surge-selection-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::surge_selection_gain),
      "selection gains per channel (0 or 1)" },
    { TABNAME("set-sway-selection-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::sway_selection_gain),
      "A class member" },
    { TABNAME("set-heave-selection-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::heave_selection_gain),
      "A class member" },
    { TABNAME("set-roll-selection-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::roll_selection_gain),
      "A class member" },
    { TABNAME("set-pitch-selection-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::pitch_selection_gain),
      "A class member" },
    { TABNAME("set-yaw-selection-gain"),
      new VarProbe<Cw16ParameterSet,double >(&Cw16ParameterSet::yaw_selection_gain),
      "A class member" },
    { NULL, NULL,
      " Defaults from Cw12\n"
       "" } };
  return parameter_table;
}
#endif
#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
Cw16ParameterSet::Cw16ParameterSet():
    id(0),
    tilt_coordination_method(1),
    surge_gain(0.6),
    surge_hp_wn(0.8),
    surge_hp_z(1.0),
    surge_hp_wb(0.0),
    surge_lp_wn(2.0),
    surge_lp_z(1.0),
    sway_gain(0.6),
    sway_hp_wn(1.0),
    sway_hp_z(1.0),
    sway_hp_wb(0.0),
    sway_lp_wn(2.0),
    sway_lp_z(1.0),
    heave_gain(0.5),
    heave_hp_wn(1.0),
    heave_hp_z(1.0),
    heave_hp_wb(0.2),
    roll_gain(0.6),
    roll_hp_wn(1.0),
    roll_hp_z(1.0),
    roll_hp_wb(0.0),
    pitch_gain(0.6),
    pitch_hp_wn(0.8),
    pitch_hp_z(1.0),
    pitch_hp_wb(0.0),
    yaw_gain(0.6),
    yaw_hp_wn(1.0),
    yaw_hp_z(1.0),
    yaw_hp_wb(0.0),
    surge_tilt_gain(0),
    sway_tilt_gain(0),
    tilt_rate_limit(3.0),
    ac_ref_pos_x(0.0),
    ac_ref_pos_y(0.0),
    ac_ref_pos_z(-1.2075),
    filt_ref_pos_x(0.0),
    filt_ref_pos_y(0.0),
    filt_ref_pos_z(0.0),
    surge_selection_gain(1.0),
    sway_selection_gain(1.0),
    heave_selection_gain(1.0),
    roll_selection_gain(1.0),
    pitch_selection_gain(1.0),
    yaw_selection_gain(1.0)
{
  DOBS("default constructor Cw16ParameterSet");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
Cw16ParameterSet::Cw16ParameterSet(
        const int& id,
        const double& tilt_coordination_method,
        const double& surge_gain,
        const double& surge_hp_wn,
        const double& surge_hp_z,
        const double& surge_hp_wb,
        const double& surge_lp_wn,
        const double& surge_lp_z,
        const double& sway_gain,
        const double& sway_hp_wn,
        const double& sway_hp_z,
        const double& sway_hp_wb,
        const double& sway_lp_wn,
        const double& sway_lp_z,
        const double& heave_gain,
        const double& heave_hp_wn,
        const double& heave_hp_z,
        const double& heave_hp_wb,
        const double& roll_gain,
        const double& roll_hp_wn,
        const double& roll_hp_z,
        const double& roll_hp_wb,
        const double& pitch_gain,
        const double& pitch_hp_wn,
        const double& pitch_hp_z,
        const double& pitch_hp_wb,
        const double& yaw_gain,
        const double& yaw_hp_wn,
        const double& yaw_hp_z,
        const double& yaw_hp_wb,
        const double& surge_tilt_gain,
        const double& sway_tilt_gain,
        const double& tilt_rate_limit,
        const double& ac_ref_pos_x,
        const double& ac_ref_pos_y,
        const double& ac_ref_pos_z,
        const double& filt_ref_pos_x,
        const double& filt_ref_pos_y,
        const double& filt_ref_pos_z,
        const double& surge_selection_gain,
        const double& sway_selection_gain,
        const double& heave_selection_gain,
        const double& roll_selection_gain,
        const double& pitch_selection_gain,
        const double& yaw_selection_gain) :
    id(id),
    tilt_coordination_method(tilt_coordination_method),
    surge_gain(surge_gain),
    surge_hp_wn(surge_hp_wn),
    surge_hp_z(surge_hp_z),
    surge_hp_wb(surge_hp_wb),
    surge_lp_wn(surge_lp_wn),
    surge_lp_z(surge_lp_z),
    sway_gain(sway_gain),
    sway_hp_wn(sway_hp_wn),
    sway_hp_z(sway_hp_z),
    sway_hp_wb(sway_hp_wb),
    sway_lp_wn(sway_lp_wn),
    sway_lp_z(sway_lp_z),
    heave_gain(heave_gain),
    heave_hp_wn(heave_hp_wn),
    heave_hp_z(heave_hp_z),
    heave_hp_wb(heave_hp_wb),
    roll_gain(roll_gain),
    roll_hp_wn(roll_hp_wn),
    roll_hp_z(roll_hp_z),
    roll_hp_wb(roll_hp_wb),
    pitch_gain(pitch_gain),
    pitch_hp_wn(pitch_hp_wn),
    pitch_hp_z(pitch_hp_z),
    pitch_hp_wb(pitch_hp_wb),
    yaw_gain(yaw_gain),
    yaw_hp_wn(yaw_hp_wn),
    yaw_hp_z(yaw_hp_z),
    yaw_hp_wb(yaw_hp_wb),
    surge_tilt_gain(surge_tilt_gain),
    sway_tilt_gain(sway_tilt_gain),
    tilt_rate_limit(tilt_rate_limit),
    ac_ref_pos_x(ac_ref_pos_x),
    ac_ref_pos_y(ac_ref_pos_y),
    ac_ref_pos_z(ac_ref_pos_z),
    filt_ref_pos_x(filt_ref_pos_x),
    filt_ref_pos_y(filt_ref_pos_y),
    filt_ref_pos_z(filt_ref_pos_z),
    surge_selection_gain(surge_selection_gain),
    sway_selection_gain(sway_selection_gain),
    heave_selection_gain(heave_selection_gain),
    roll_selection_gain(roll_selection_gain),
    pitch_selection_gain(pitch_selection_gain),
    yaw_selection_gain(yaw_selection_gain)
{
  DOBS("complete constructor Cw16ParameterSet");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
Cw16ParameterSet::Cw16ParameterSet(const Cw16ParameterSet& other):
    id(other.id),
    tilt_coordination_method(other.tilt_coordination_method),
    surge_gain(other.surge_gain),
    surge_hp_wn(other.surge_hp_wn),
    surge_hp_z(other.surge_hp_z),
    surge_hp_wb(other.surge_hp_wb),
    surge_lp_wn(other.surge_lp_wn),
    surge_lp_z(other.surge_lp_z),
    sway_gain(other.sway_gain),
    sway_hp_wn(other.sway_hp_wn),
    sway_hp_z(other.sway_hp_z),
    sway_hp_wb(other.sway_hp_wb),
    sway_lp_wn(other.sway_lp_wn),
    sway_lp_z(other.sway_lp_z),
    heave_gain(other.heave_gain),
    heave_hp_wn(other.heave_hp_wn),
    heave_hp_z(other.heave_hp_z),
    heave_hp_wb(other.heave_hp_wb),
    roll_gain(other.roll_gain),
    roll_hp_wn(other.roll_hp_wn),
    roll_hp_z(other.roll_hp_z),
    roll_hp_wb(other.roll_hp_wb),
    pitch_gain(other.pitch_gain),
    pitch_hp_wn(other.pitch_hp_wn),
    pitch_hp_z(other.pitch_hp_z),
    pitch_hp_wb(other.pitch_hp_wb),
    yaw_gain(other.yaw_gain),
    yaw_hp_wn(other.yaw_hp_wn),
    yaw_hp_z(other.yaw_hp_z),
    yaw_hp_wb(other.yaw_hp_wb),
    surge_tilt_gain(other.surge_tilt_gain),
    sway_tilt_gain(other.sway_tilt_gain),
    tilt_rate_limit(other.tilt_rate_limit),
    ac_ref_pos_x(other.ac_ref_pos_x),
    ac_ref_pos_y(other.ac_ref_pos_y),
    ac_ref_pos_z(other.ac_ref_pos_z),
    filt_ref_pos_x(other.filt_ref_pos_x),
    filt_ref_pos_y(other.filt_ref_pos_y),
    filt_ref_pos_z(other.filt_ref_pos_z),
    surge_selection_gain(other.surge_selection_gain),
    sway_selection_gain(other.sway_selection_gain),
    heave_selection_gain(other.heave_selection_gain),
    roll_selection_gain(other.roll_selection_gain),
    pitch_selection_gain(other.pitch_selection_gain),
    yaw_selection_gain(other.yaw_selection_gain)
{
  DOBS("copy constructor Cw16ParameterSet");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
Cw16ParameterSet::Cw16ParameterSet(dueca::AmorphReStore& s):
        id(s),
        tilt_coordination_method(s),
        surge_gain(s),
        surge_hp_wn(s),
        surge_hp_z(s),
        surge_hp_wb(s),
        surge_lp_wn(s),
        surge_lp_z(s),
        sway_gain(s),
        sway_hp_wn(s),
        sway_hp_z(s),
        sway_hp_wb(s),
        sway_lp_wn(s),
        sway_lp_z(s),
        heave_gain(s),
        heave_hp_wn(s),
        heave_hp_z(s),
        heave_hp_wb(s),
        roll_gain(s),
        roll_hp_wn(s),
        roll_hp_z(s),
        roll_hp_wb(s),
        pitch_gain(s),
        pitch_hp_wn(s),
        pitch_hp_z(s),
        pitch_hp_wb(s),
        yaw_gain(s),
        yaw_hp_wn(s),
        yaw_hp_z(s),
        yaw_hp_wb(s),
        surge_tilt_gain(s),
        sway_tilt_gain(s),
        tilt_rate_limit(s),
        ac_ref_pos_x(s),
        ac_ref_pos_y(s),
        ac_ref_pos_z(s),
        filt_ref_pos_x(s),
        filt_ref_pos_y(s),
        filt_ref_pos_z(s),
        surge_selection_gain(s),
        sway_selection_gain(s),
        heave_selection_gain(s),
        roll_selection_gain(s),
        pitch_selection_gain(s),
        yaw_selection_gain(s)
{
  DOBS("amorph constructor Cw16ParameterSet");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
Cw16ParameterSet::~Cw16ParameterSet()
{
  DOBS("destructor Cw16ParameterSet");
}
#endif

#if !defined(__DCO_STANDALONE)
void* Cw16ParameterSet::operator new(size_t size)
{
  DOBS("operator new Cw16ParameterSet");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(Cw16ParameterSet));
  return my_arena->alloc(size);
}

void Cw16ParameterSet::operator delete(void* v)
{
  DOBS("operator delete Cw16ParameterSet");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(Cw16ParameterSet));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void Cw16ParameterSet::packDataDiff(::dueca::AmorphStore& s, const Cw16ParameterSet& ref) const
{
  DOBS("packDataDiff Cw16ParameterSet");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->id, ref.id,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->tilt_coordination_method, ref.tilt_coordination_method,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_gain, ref.surge_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_hp_wn, ref.surge_hp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_hp_z, ref.surge_hp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_hp_wb, ref.surge_hp_wb,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_lp_wn, ref.surge_lp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_lp_z, ref.surge_lp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_gain, ref.sway_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_hp_wn, ref.sway_hp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_hp_z, ref.sway_hp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_hp_wb, ref.sway_hp_wb,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_lp_wn, ref.sway_lp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_lp_z, ref.sway_lp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->heave_gain, ref.heave_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->heave_hp_wn, ref.heave_hp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->heave_hp_z, ref.heave_hp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->heave_hp_wb, ref.heave_hp_wb,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_gain, ref.roll_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_hp_wn, ref.roll_hp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_hp_z, ref.roll_hp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_hp_wb, ref.roll_hp_wb,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_gain, ref.pitch_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_hp_wn, ref.pitch_hp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_hp_z, ref.pitch_hp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_hp_wb, ref.pitch_hp_wb,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->yaw_gain, ref.yaw_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->yaw_hp_wn, ref.yaw_hp_wn,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->yaw_hp_z, ref.yaw_hp_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->yaw_hp_wb, ref.yaw_hp_wb,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_tilt_gain, ref.surge_tilt_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_tilt_gain, ref.sway_tilt_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->tilt_rate_limit, ref.tilt_rate_limit,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ac_ref_pos_x, ref.ac_ref_pos_x,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ac_ref_pos_y, ref.ac_ref_pos_y,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ac_ref_pos_z, ref.ac_ref_pos_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->filt_ref_pos_x, ref.filt_ref_pos_x,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->filt_ref_pos_y, ref.filt_ref_pos_y,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->filt_ref_pos_z, ref.filt_ref_pos_z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->surge_selection_gain, ref.surge_selection_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->sway_selection_gain, ref.sway_selection_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->heave_selection_gain, ref.heave_selection_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_selection_gain, ref.roll_selection_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_selection_gain, ref.pitch_selection_gain,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->yaw_selection_gain, ref.yaw_selection_gain,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void Cw16ParameterSet::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData Cw16ParameterSet");

  ::unPackData(s, this->id);
  ::unPackData(s, this->tilt_coordination_method);
  ::unPackData(s, this->surge_gain);
  ::unPackData(s, this->surge_hp_wn);
  ::unPackData(s, this->surge_hp_z);
  ::unPackData(s, this->surge_hp_wb);
  ::unPackData(s, this->surge_lp_wn);
  ::unPackData(s, this->surge_lp_z);
  ::unPackData(s, this->sway_gain);
  ::unPackData(s, this->sway_hp_wn);
  ::unPackData(s, this->sway_hp_z);
  ::unPackData(s, this->sway_hp_wb);
  ::unPackData(s, this->sway_lp_wn);
  ::unPackData(s, this->sway_lp_z);
  ::unPackData(s, this->heave_gain);
  ::unPackData(s, this->heave_hp_wn);
  ::unPackData(s, this->heave_hp_z);
  ::unPackData(s, this->heave_hp_wb);
  ::unPackData(s, this->roll_gain);
  ::unPackData(s, this->roll_hp_wn);
  ::unPackData(s, this->roll_hp_z);
  ::unPackData(s, this->roll_hp_wb);
  ::unPackData(s, this->pitch_gain);
  ::unPackData(s, this->pitch_hp_wn);
  ::unPackData(s, this->pitch_hp_z);
  ::unPackData(s, this->pitch_hp_wb);
  ::unPackData(s, this->yaw_gain);
  ::unPackData(s, this->yaw_hp_wn);
  ::unPackData(s, this->yaw_hp_z);
  ::unPackData(s, this->yaw_hp_wb);
  ::unPackData(s, this->surge_tilt_gain);
  ::unPackData(s, this->sway_tilt_gain);
  ::unPackData(s, this->tilt_rate_limit);
  ::unPackData(s, this->ac_ref_pos_x);
  ::unPackData(s, this->ac_ref_pos_y);
  ::unPackData(s, this->ac_ref_pos_z);
  ::unPackData(s, this->filt_ref_pos_x);
  ::unPackData(s, this->filt_ref_pos_y);
  ::unPackData(s, this->filt_ref_pos_z);
  ::unPackData(s, this->surge_selection_gain);
  ::unPackData(s, this->sway_selection_gain);
  ::unPackData(s, this->heave_selection_gain);
  ::unPackData(s, this->roll_selection_gain);
  ::unPackData(s, this->pitch_selection_gain);
  ::unPackData(s, this->yaw_selection_gain);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void Cw16ParameterSet::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff Cw16ParameterSet");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->id, s, im);
  ::dueca::checkandunpackdiffsingle(this->tilt_coordination_method, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_hp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_hp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_hp_wb, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_lp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_lp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_hp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_hp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_hp_wb, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_lp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_lp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->heave_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->heave_hp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->heave_hp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->heave_hp_wb, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_hp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_hp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_hp_wb, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_hp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_hp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_hp_wb, s, im);
  ::dueca::checkandunpackdiffsingle(this->yaw_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->yaw_hp_wn, s, im);
  ::dueca::checkandunpackdiffsingle(this->yaw_hp_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->yaw_hp_wb, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_tilt_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_tilt_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->tilt_rate_limit, s, im);
  ::dueca::checkandunpackdiffsingle(this->ac_ref_pos_x, s, im);
  ::dueca::checkandunpackdiffsingle(this->ac_ref_pos_y, s, im);
  ::dueca::checkandunpackdiffsingle(this->ac_ref_pos_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->filt_ref_pos_x, s, im);
  ::dueca::checkandunpackdiffsingle(this->filt_ref_pos_y, s, im);
  ::dueca::checkandunpackdiffsingle(this->filt_ref_pos_z, s, im);
  ::dueca::checkandunpackdiffsingle(this->surge_selection_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->sway_selection_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->heave_selection_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_selection_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_selection_gain, s, im);
  ::dueca::checkandunpackdiffsingle(this->yaw_selection_gain, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool Cw16ParameterSet::operator == (const Cw16ParameterSet& other) const
{
  DOBS("operator == Cw16ParameterSet");
  if (this->id != other.id) return false;
  if (this->tilt_coordination_method != other.tilt_coordination_method) return false;
  if (this->surge_gain != other.surge_gain) return false;
  if (this->surge_hp_wn != other.surge_hp_wn) return false;
  if (this->surge_hp_z != other.surge_hp_z) return false;
  if (this->surge_hp_wb != other.surge_hp_wb) return false;
  if (this->surge_lp_wn != other.surge_lp_wn) return false;
  if (this->surge_lp_z != other.surge_lp_z) return false;
  if (this->sway_gain != other.sway_gain) return false;
  if (this->sway_hp_wn != other.sway_hp_wn) return false;
  if (this->sway_hp_z != other.sway_hp_z) return false;
  if (this->sway_hp_wb != other.sway_hp_wb) return false;
  if (this->sway_lp_wn != other.sway_lp_wn) return false;
  if (this->sway_lp_z != other.sway_lp_z) return false;
  if (this->heave_gain != other.heave_gain) return false;
  if (this->heave_hp_wn != other.heave_hp_wn) return false;
  if (this->heave_hp_z != other.heave_hp_z) return false;
  if (this->heave_hp_wb != other.heave_hp_wb) return false;
  if (this->roll_gain != other.roll_gain) return false;
  if (this->roll_hp_wn != other.roll_hp_wn) return false;
  if (this->roll_hp_z != other.roll_hp_z) return false;
  if (this->roll_hp_wb != other.roll_hp_wb) return false;
  if (this->pitch_gain != other.pitch_gain) return false;
  if (this->pitch_hp_wn != other.pitch_hp_wn) return false;
  if (this->pitch_hp_z != other.pitch_hp_z) return false;
  if (this->pitch_hp_wb != other.pitch_hp_wb) return false;
  if (this->yaw_gain != other.yaw_gain) return false;
  if (this->yaw_hp_wn != other.yaw_hp_wn) return false;
  if (this->yaw_hp_z != other.yaw_hp_z) return false;
  if (this->yaw_hp_wb != other.yaw_hp_wb) return false;
  if (this->surge_tilt_gain != other.surge_tilt_gain) return false;
  if (this->sway_tilt_gain != other.sway_tilt_gain) return false;
  if (this->tilt_rate_limit != other.tilt_rate_limit) return false;
  if (this->ac_ref_pos_x != other.ac_ref_pos_x) return false;
  if (this->ac_ref_pos_y != other.ac_ref_pos_y) return false;
  if (this->ac_ref_pos_z != other.ac_ref_pos_z) return false;
  if (this->filt_ref_pos_x != other.filt_ref_pos_x) return false;
  if (this->filt_ref_pos_y != other.filt_ref_pos_y) return false;
  if (this->filt_ref_pos_z != other.filt_ref_pos_z) return false;
  if (this->surge_selection_gain != other.surge_selection_gain) return false;
  if (this->sway_selection_gain != other.sway_selection_gain) return false;
  if (this->heave_selection_gain != other.heave_selection_gain) return false;
  if (this->roll_selection_gain != other.roll_selection_gain) return false;
  if (this->pitch_selection_gain != other.pitch_selection_gain) return false;
  if (this->yaw_selection_gain != other.yaw_selection_gain) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
Cw16ParameterSet&
Cw16ParameterSet::operator=(const Cw16ParameterSet& other)
{
  DOBS("operator = Cw16ParameterSet");
  if (this == &other) return *this;
  this->id = other.id;
  this->tilt_coordination_method = other.tilt_coordination_method;
  this->surge_gain = other.surge_gain;
  this->surge_hp_wn = other.surge_hp_wn;
  this->surge_hp_z = other.surge_hp_z;
  this->surge_hp_wb = other.surge_hp_wb;
  this->surge_lp_wn = other.surge_lp_wn;
  this->surge_lp_z = other.surge_lp_z;
  this->sway_gain = other.sway_gain;
  this->sway_hp_wn = other.sway_hp_wn;
  this->sway_hp_z = other.sway_hp_z;
  this->sway_hp_wb = other.sway_hp_wb;
  this->sway_lp_wn = other.sway_lp_wn;
  this->sway_lp_z = other.sway_lp_z;
  this->heave_gain = other.heave_gain;
  this->heave_hp_wn = other.heave_hp_wn;
  this->heave_hp_z = other.heave_hp_z;
  this->heave_hp_wb = other.heave_hp_wb;
  this->roll_gain = other.roll_gain;
  this->roll_hp_wn = other.roll_hp_wn;
  this->roll_hp_z = other.roll_hp_z;
  this->roll_hp_wb = other.roll_hp_wb;
  this->pitch_gain = other.pitch_gain;
  this->pitch_hp_wn = other.pitch_hp_wn;
  this->pitch_hp_z = other.pitch_hp_z;
  this->pitch_hp_wb = other.pitch_hp_wb;
  this->yaw_gain = other.yaw_gain;
  this->yaw_hp_wn = other.yaw_hp_wn;
  this->yaw_hp_z = other.yaw_hp_z;
  this->yaw_hp_wb = other.yaw_hp_wb;
  this->surge_tilt_gain = other.surge_tilt_gain;
  this->sway_tilt_gain = other.sway_tilt_gain;
  this->tilt_rate_limit = other.tilt_rate_limit;
  this->ac_ref_pos_x = other.ac_ref_pos_x;
  this->ac_ref_pos_y = other.ac_ref_pos_y;
  this->ac_ref_pos_z = other.ac_ref_pos_z;
  this->filt_ref_pos_x = other.filt_ref_pos_x;
  this->filt_ref_pos_y = other.filt_ref_pos_y;
  this->filt_ref_pos_z = other.filt_ref_pos_z;
  this->surge_selection_gain = other.surge_selection_gain;
  this->sway_selection_gain = other.sway_selection_gain;
  this->heave_selection_gain = other.heave_selection_gain;
  this->roll_selection_gain = other.roll_selection_gain;
  this->pitch_selection_gain = other.pitch_selection_gain;
  this->yaw_selection_gain = other.yaw_selection_gain;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void Cw16ParameterSet::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData Cw16ParameterSet");
  ::packData(s, this->id);
  ::packData(s, this->tilt_coordination_method);
  ::packData(s, this->surge_gain);
  ::packData(s, this->surge_hp_wn);
  ::packData(s, this->surge_hp_z);
  ::packData(s, this->surge_hp_wb);
  ::packData(s, this->surge_lp_wn);
  ::packData(s, this->surge_lp_z);
  ::packData(s, this->sway_gain);
  ::packData(s, this->sway_hp_wn);
  ::packData(s, this->sway_hp_z);
  ::packData(s, this->sway_hp_wb);
  ::packData(s, this->sway_lp_wn);
  ::packData(s, this->sway_lp_z);
  ::packData(s, this->heave_gain);
  ::packData(s, this->heave_hp_wn);
  ::packData(s, this->heave_hp_z);
  ::packData(s, this->heave_hp_wb);
  ::packData(s, this->roll_gain);
  ::packData(s, this->roll_hp_wn);
  ::packData(s, this->roll_hp_z);
  ::packData(s, this->roll_hp_wb);
  ::packData(s, this->pitch_gain);
  ::packData(s, this->pitch_hp_wn);
  ::packData(s, this->pitch_hp_z);
  ::packData(s, this->pitch_hp_wb);
  ::packData(s, this->yaw_gain);
  ::packData(s, this->yaw_hp_wn);
  ::packData(s, this->yaw_hp_z);
  ::packData(s, this->yaw_hp_wb);
  ::packData(s, this->surge_tilt_gain);
  ::packData(s, this->sway_tilt_gain);
  ::packData(s, this->tilt_rate_limit);
  ::packData(s, this->ac_ref_pos_x);
  ::packData(s, this->ac_ref_pos_y);
  ::packData(s, this->ac_ref_pos_z);
  ::packData(s, this->filt_ref_pos_x);
  ::packData(s, this->filt_ref_pos_y);
  ::packData(s, this->filt_ref_pos_z);
  ::packData(s, this->surge_selection_gain);
  ::packData(s, this->sway_selection_gain);
  ::packData(s, this->heave_selection_gain);
  ::packData(s, this->roll_selection_gain);
  ::packData(s, this->pitch_selection_gain);
  ::packData(s, this->yaw_selection_gain);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & Cw16ParameterSet::print(std::ostream& s) const
{
  s << "Cw16ParameterSet("
    << "id=" << this->id << ','
    << "tilt_coordination_method=" << this->tilt_coordination_method << ','
    << "surge_gain=" << this->surge_gain << ','
    << "surge_hp_wn=" << this->surge_hp_wn << ','
    << "surge_hp_z=" << this->surge_hp_z << ','
    << "surge_hp_wb=" << this->surge_hp_wb << ','
    << "surge_lp_wn=" << this->surge_lp_wn << ','
    << "surge_lp_z=" << this->surge_lp_z << ','
    << "sway_gain=" << this->sway_gain << ','
    << "sway_hp_wn=" << this->sway_hp_wn << ','
    << "sway_hp_z=" << this->sway_hp_z << ','
    << "sway_hp_wb=" << this->sway_hp_wb << ','
    << "sway_lp_wn=" << this->sway_lp_wn << ','
    << "sway_lp_z=" << this->sway_lp_z << ','
    << "heave_gain=" << this->heave_gain << ','
    << "heave_hp_wn=" << this->heave_hp_wn << ','
    << "heave_hp_z=" << this->heave_hp_z << ','
    << "heave_hp_wb=" << this->heave_hp_wb << ','
    << "roll_gain=" << this->roll_gain << ','
    << "roll_hp_wn=" << this->roll_hp_wn << ','
    << "roll_hp_z=" << this->roll_hp_z << ','
    << "roll_hp_wb=" << this->roll_hp_wb << ','
    << "pitch_gain=" << this->pitch_gain << ','
    << "pitch_hp_wn=" << this->pitch_hp_wn << ','
    << "pitch_hp_z=" << this->pitch_hp_z << ','
    << "pitch_hp_wb=" << this->pitch_hp_wb << ','
    << "yaw_gain=" << this->yaw_gain << ','
    << "yaw_hp_wn=" << this->yaw_hp_wn << ','
    << "yaw_hp_z=" << this->yaw_hp_z << ','
    << "yaw_hp_wb=" << this->yaw_hp_wb << ','
    << "surge_tilt_gain=" << this->surge_tilt_gain << ','
    << "sway_tilt_gain=" << this->sway_tilt_gain << ','
    << "tilt_rate_limit=" << this->tilt_rate_limit << ','
    << "ac_ref_pos_x=" << this->ac_ref_pos_x << ','
    << "ac_ref_pos_y=" << this->ac_ref_pos_y << ','
    << "ac_ref_pos_z=" << this->ac_ref_pos_z << ','
    << "filt_ref_pos_x=" << this->filt_ref_pos_x << ','
    << "filt_ref_pos_y=" << this->filt_ref_pos_y << ','
    << "filt_ref_pos_z=" << this->filt_ref_pos_z << ','
    << "surge_selection_gain=" << this->surge_selection_gain << ','
    << "sway_selection_gain=" << this->sway_selection_gain << ','
    << "heave_selection_gain=" << this->heave_selection_gain << ','
    << "roll_selection_gain=" << this->roll_selection_gain << ','
    << "pitch_selection_gain=" << this->pitch_selection_gain << ','
    << "yaw_selection_gain=" << this->yaw_selection_gain
    << ')';
  return s;
}
#endif


#if !defined(__DCO_STANDALONE)
// specialisation of the script class data singleton
#ifdef SCRIPT_SCHEME
#include <SchemeClassData.hxx>
DUECA_NS_START
template<>
SchemeClassData<ScriptCreatableDataHolder<Cw16ParameterSet> >*
SchemeClassData<ScriptCreatableDataHolder<Cw16ParameterSet> >::single()
{
  static SchemeClassData<ScriptCreatableDataHolder<Cw16ParameterSet> > singleton
    ("Cw16ParameterSet", SchemeClassData<ScriptCreatable>::single());
  return &singleton;
}
DUECA_NS_END
#endif

// Make a CoreCreator object for this module, the CoreCreator
// will check in with the scheme-interpreting code, and enable the
// creation of objects of this type
static CoreCreator<ScriptCreatableDataHolder<Cw16ParameterSet> >
a(Cw16ParameterSet::getParameterTable(), "Cw16ParameterSet");
#endif

