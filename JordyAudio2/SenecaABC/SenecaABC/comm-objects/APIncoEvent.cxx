/* ------------------------------------------------------------------ */
/*      item            : APIncoEvent.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "APIncoEvent.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a APIncoEvent object
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,int >
  APIncoEvent_member_APstate(&APIncoEvent::APstate, "APstate");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,int >
  APIncoEvent_member_verticalFDstate(&APIncoEvent::verticalFDstate, "verticalFDstate");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,int >
  APIncoEvent_member_lateralFDstate(&APIncoEvent::lateralFDstate, "lateralFDstate");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,int >
  APIncoEvent_member_active_nav_source(&APIncoEvent::active_nav_source, "active_nav_source");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,float >
  APIncoEvent_member_altSelect(&APIncoEvent::altSelect, "altSelect");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,float >
  APIncoEvent_member_hdgSelect(&APIncoEvent::hdgSelect, "hdgSelect");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,float >
  APIncoEvent_member_crsSelect(&APIncoEvent::crsSelect, "crsSelect");
static ::dueca::CommObjectMemberAccess
  <APIncoEvent,std::string >
  APIncoEvent_member_fp_name(&APIncoEvent::fp_name, "fp_name");

// assemble the above entries into a table in the order in which they
// appear in the APIncoEvent object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &APIncoEvent_member_APstate },
  { &APIncoEvent_member_verticalFDstate },
  { &APIncoEvent_member_lateralFDstate },
  { &APIncoEvent_member_active_nav_source },
  { &APIncoEvent_member_altSelect },
  { &APIncoEvent_member_hdgSelect },
  { &APIncoEvent_member_crsSelect },
  { &APIncoEvent_member_fp_name },
  { NULL }
};

#endif

// class name, static
const char * const APIncoEvent::classname = "APIncoEvent";

// magic number, hashed from class name and member names / classes
const uint32_t APIncoEvent::magic_check_number=0x14f43297;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (APIncoEvent::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<APIncoEvent>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
APIncoEvent::APIncoEvent()
{
  DOBS("default constructor APIncoEvent");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
APIncoEvent::APIncoEvent(
        const int& APstate,
        const int& verticalFDstate,
        const int& lateralFDstate,
        const int& active_nav_source,
        const float& altSelect,
        const float& hdgSelect,
        const float& crsSelect,
        const std::string& fp_name) :
    APstate(APstate),
    verticalFDstate(verticalFDstate),
    lateralFDstate(lateralFDstate),
    active_nav_source(active_nav_source),
    altSelect(altSelect),
    hdgSelect(hdgSelect),
    crsSelect(crsSelect),
    fp_name(fp_name)
{
  DOBS("complete constructor APIncoEvent");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
APIncoEvent::APIncoEvent(const APIncoEvent& other):
    APstate(other.APstate),
    verticalFDstate(other.verticalFDstate),
    lateralFDstate(other.lateralFDstate),
    active_nav_source(other.active_nav_source),
    altSelect(other.altSelect),
    hdgSelect(other.hdgSelect),
    crsSelect(other.crsSelect),
    fp_name(other.fp_name)
{
  DOBS("copy constructor APIncoEvent");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
APIncoEvent::APIncoEvent(dueca::AmorphReStore& s):
        APstate(s),
        verticalFDstate(s),
        lateralFDstate(s),
        active_nav_source(s),
        altSelect(s),
        hdgSelect(s),
        crsSelect(s),
        fp_name(s)
{
  DOBS("amorph constructor APIncoEvent");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
APIncoEvent::~APIncoEvent()
{
  DOBS("destructor APIncoEvent");
}
#endif

#if !defined(__DCO_STANDALONE)
void* APIncoEvent::operator new(size_t size)
{
  DOBS("operator new APIncoEvent");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(APIncoEvent));
  return my_arena->alloc(size);
}

void APIncoEvent::operator delete(void* v)
{
  DOBS("operator delete APIncoEvent");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(APIncoEvent));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void APIncoEvent::packDataDiff(::dueca::AmorphStore& s, const APIncoEvent& ref) const
{
  DOBS("packDataDiff APIncoEvent");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->APstate, ref.APstate,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->verticalFDstate, ref.verticalFDstate,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->lateralFDstate, ref.lateralFDstate,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->active_nav_source, ref.active_nav_source,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->altSelect, ref.altSelect,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->hdgSelect, ref.hdgSelect,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->crsSelect, ref.crsSelect,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->fp_name, ref.fp_name,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void APIncoEvent::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData APIncoEvent");

  ::unPackData(s, this->APstate);
  ::unPackData(s, this->verticalFDstate);
  ::unPackData(s, this->lateralFDstate);
  ::unPackData(s, this->active_nav_source);
  ::unPackData(s, this->altSelect);
  ::unPackData(s, this->hdgSelect);
  ::unPackData(s, this->crsSelect);
  ::unPackData(s, this->fp_name);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void APIncoEvent::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff APIncoEvent");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->APstate, s, im);
  ::dueca::checkandunpackdiffsingle(this->verticalFDstate, s, im);
  ::dueca::checkandunpackdiffsingle(this->lateralFDstate, s, im);
  ::dueca::checkandunpackdiffsingle(this->active_nav_source, s, im);
  ::dueca::checkandunpackdiffsingle(this->altSelect, s, im);
  ::dueca::checkandunpackdiffsingle(this->hdgSelect, s, im);
  ::dueca::checkandunpackdiffsingle(this->crsSelect, s, im);
  ::dueca::checkandunpackdiffsingle(this->fp_name, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool APIncoEvent::operator == (const APIncoEvent& other) const
{
  DOBS("operator == APIncoEvent");
  if (this->APstate != other.APstate) return false;
  if (this->verticalFDstate != other.verticalFDstate) return false;
  if (this->lateralFDstate != other.lateralFDstate) return false;
  if (this->active_nav_source != other.active_nav_source) return false;
  if (this->altSelect != other.altSelect) return false;
  if (this->hdgSelect != other.hdgSelect) return false;
  if (this->crsSelect != other.crsSelect) return false;
  if (this->fp_name != other.fp_name) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
APIncoEvent&
APIncoEvent::operator=(const APIncoEvent& other)
{
  DOBS("operator = APIncoEvent");
  if (this == &other) return *this;
  this->APstate = other.APstate;
  this->verticalFDstate = other.verticalFDstate;
  this->lateralFDstate = other.lateralFDstate;
  this->active_nav_source = other.active_nav_source;
  this->altSelect = other.altSelect;
  this->hdgSelect = other.hdgSelect;
  this->crsSelect = other.crsSelect;
  this->fp_name = other.fp_name;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void APIncoEvent::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData APIncoEvent");
  ::packData(s, this->APstate);
  ::packData(s, this->verticalFDstate);
  ::packData(s, this->lateralFDstate);
  ::packData(s, this->active_nav_source);
  ::packData(s, this->altSelect);
  ::packData(s, this->hdgSelect);
  ::packData(s, this->crsSelect);
  ::packData(s, this->fp_name);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & APIncoEvent::print(std::ostream& s) const
{
  s << "APIncoEvent("
    << "APstate=" << this->APstate << ','
    << "verticalFDstate=" << this->verticalFDstate << ','
    << "lateralFDstate=" << this->lateralFDstate << ','
    << "active_nav_source=" << this->active_nav_source << ','
    << "altSelect=" << this->altSelect << ','
    << "hdgSelect=" << this->hdgSelect << ','
    << "crsSelect=" << this->crsSelect << ','
    << "fp_name=" << this->fp_name
    << ')';
  return s;
}
#endif


