/* ------------------------------------------------------------------ */
/*      item            : GFC700Event.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "GFC700Event.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a GFC700Event object
static ::dueca::CommObjectMemberAccess
  <GFC700Event,GFC700Event::msgType >
  GFC700Event_member_msg(&GFC700Event::msg, "msg");
static ::dueca::CommObjectMemberAccess
  <GFC700Event,float >
  GFC700Event_member_alt_select(&GFC700Event::alt_select, "alt_select");
static ::dueca::CommObjectMemberAccess
  <GFC700Event,float >
  GFC700Event_member_hdg_select(&GFC700Event::hdg_select, "hdg_select");
static ::dueca::CommObjectMemberAccess
  <GFC700Event,float >
  GFC700Event_member_crs_select(&GFC700Event::crs_select, "crs_select");
static ::dueca::CommObjectMemberAccess
  <GFC700Event,int >
  GFC700Event_member_range(&GFC700Event::range, "range");

// assemble the above entries into a table in the order in which they
// appear in the GFC700Event object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &GFC700Event_member_msg },
  { &GFC700Event_member_alt_select },
  { &GFC700Event_member_hdg_select },
  { &GFC700Event_member_crs_select },
  { &GFC700Event_member_range },
  { NULL }
};

#endif

// class name, static
const char * const GFC700Event::classname = "GFC700Event";

// magic number, hashed from class name and member names / classes
const uint32_t GFC700Event::magic_check_number=0x8590c184;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (GFC700Event::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<GFC700Event>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
GFC700Event::GFC700Event():
    range(5)
{
  DOBS("default constructor GFC700Event");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
GFC700Event::GFC700Event(
        const msgType& msg,
        const float& alt_select,
        const float& hdg_select,
        const float& crs_select,
        const int& range) :
    msg(msg),
    alt_select(alt_select),
    hdg_select(hdg_select),
    crs_select(crs_select),
    range(range)
{
  DOBS("complete constructor GFC700Event");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
GFC700Event::GFC700Event(const GFC700Event& other):
    msg(other.msg),
    alt_select(other.alt_select),
    hdg_select(other.hdg_select),
    crs_select(other.crs_select),
    range(other.range)
{
  DOBS("copy constructor GFC700Event");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
GFC700Event::GFC700Event(dueca::AmorphReStore& s):
        msg(msgType(uint32_t(s))),
        alt_select(s),
        hdg_select(s),
        crs_select(s),
        range(s)
{
  DOBS("amorph constructor GFC700Event");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
GFC700Event::~GFC700Event()
{
  DOBS("destructor GFC700Event");
}
#endif

#if !defined(__DCO_STANDALONE)
void* GFC700Event::operator new(size_t size)
{
  DOBS("operator new GFC700Event");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(GFC700Event));
  return my_arena->alloc(size);
}

void GFC700Event::operator delete(void* v)
{
  DOBS("operator delete GFC700Event");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(GFC700Event));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void GFC700Event::packDataDiff(::dueca::AmorphStore& s, const GFC700Event& ref) const
{
  DOBS("packDataDiff GFC700Event");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->msg, ref.msg,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->alt_select, ref.alt_select,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->hdg_select, ref.hdg_select,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->crs_select, ref.crs_select,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->range, ref.range,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void GFC700Event::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData GFC700Event");

  ::unPackData(s, this->msg);
  ::unPackData(s, this->alt_select);
  ::unPackData(s, this->hdg_select);
  ::unPackData(s, this->crs_select);
  ::unPackData(s, this->range);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void GFC700Event::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff GFC700Event");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->msg, s, im);
  ::dueca::checkandunpackdiffsingle(this->alt_select, s, im);
  ::dueca::checkandunpackdiffsingle(this->hdg_select, s, im);
  ::dueca::checkandunpackdiffsingle(this->crs_select, s, im);
  ::dueca::checkandunpackdiffsingle(this->range, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool GFC700Event::operator == (const GFC700Event& other) const
{
  DOBS("operator == GFC700Event");
  if (this->msg != other.msg) return false;
  if (this->alt_select != other.alt_select) return false;
  if (this->hdg_select != other.hdg_select) return false;
  if (this->crs_select != other.crs_select) return false;
  if (this->range != other.range) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
GFC700Event&
GFC700Event::operator=(const GFC700Event& other)
{
  DOBS("operator = GFC700Event");
  if (this == &other) return *this;
  this->msg = other.msg;
  this->alt_select = other.alt_select;
  this->hdg_select = other.hdg_select;
  this->crs_select = other.crs_select;
  this->range = other.range;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void GFC700Event::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData GFC700Event");
  ::packData(s, this->msg);
  ::packData(s, this->alt_select);
  ::packData(s, this->hdg_select);
  ::packData(s, this->crs_select);
  ::packData(s, this->range);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & GFC700Event::print(std::ostream& s) const
{
  s << "GFC700Event("
    << "msg=" << this->msg << ','
    << "alt_select=" << this->alt_select << ','
    << "hdg_select=" << this->hdg_select << ','
    << "crs_select=" << this->crs_select << ','
    << "range=" << this->range
    << ')';
  return s;
}
#endif


            #ifndef __CUSTOM_GETSTRING_msgType
const char* const getString(const GFC700Event::msgType &o)
{
  static const char* msgType_names[] = {
    "GFC700_AP",
    "GFC700_VS",
    "GFC700_ALT",
    "GFC700_VNV",
    "GFC700_FLC",
    "GFC700_HDG",
    "GFC700_NAV",
    "GFC700_FD",
    "GFC700_APR",
    "GFC700_BC",
    "GFC700_NOSEUP",
    "GFC700_NOSEDN",
    "GFC700_CDI",
    "GFC700_NONE",
    "GFC700_FPL",
    "GFC700_DME",
    "GFC700_SYNC"};

  return msgType_names[int(o)];
}
#endif

#ifndef __CUSTOM_READFROMSTRING_msgType
void readFromString(GFC700Event::msgType &o, const std::string& s)
{
  for (int ii = 17; ii--; ) {
    if (std::string(getString(GFC700Event::msgType(ii))) == s) {
      o = GFC700Event::msgType(ii);
      return;
    }
  }
  throw(dueca::ConversionNotDefined());
}
#endif

#if !defined(__CUSTOM_PACKDATA_msgType) && !defined(__DCO_NOPACK)
void packData(::dueca::AmorphStore& s,
              const GFC700Event::msgType &o)
{ packData(s, uint32_t(o));}
#endif

#if !defined(__CUSTOM_UNPACKDATA_msgType) && !defined(__DCO_NOPACK)
void unPackData(::dueca::AmorphReStore& s,
                GFC700Event::msgType &o)
{ uint32_t tmp(s); o = GFC700Event::msgType(tmp); }
#endif

namespace dueca {;
template <>
const char* getclassname<GFC700Event::msgType>()
{ return "GFC700Event::msgType"; }
};

