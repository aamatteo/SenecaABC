/* ------------------------------------------------------------------ */
/*      item            : INCOSelect.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "INCOSelect.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a INCOSelect object
static ::dueca::CommObjectMemberAccess
  <INCOSelect,int >
  INCOSelect_member_id(&INCOSelect::id, "id");
static ::dueca::CommObjectMemberAccess
  <INCOSelect,vstring >
  INCOSelect_member_name(&INCOSelect::name, "name");
static ::dueca::CommObjectMemberAccess
  <INCOSelect,vstring >
  INCOSelect_member_note(&INCOSelect::note, "note");

// assemble the above entries into a table in the order in which they
// appear in the INCOSelect object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &INCOSelect_member_id },
  { &INCOSelect_member_name },
  { &INCOSelect_member_note },
  { NULL }
};

#endif

// class name, static
const char * const INCOSelect::classname = "INCOSelect";

// magic number, hashed from class name and member names / classes
const uint32_t INCOSelect::magic_check_number=0x8431186;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (INCOSelect::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<INCOSelect>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
INCOSelect::INCOSelect():
    id(0)
{
  DOBS("default constructor INCOSelect");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
INCOSelect::INCOSelect(
        const int& id,
        const vstring& name,
        const vstring& note) :
    id(id),
    name(name),
    note(note)
{
  DOBS("complete constructor INCOSelect");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
INCOSelect::INCOSelect(const INCOSelect& other):
    id(other.id),
    name(other.name),
    note(other.note)
{
  DOBS("copy constructor INCOSelect");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
INCOSelect::INCOSelect(dueca::AmorphReStore& s):
        id(s),
        name(s),
        note(s)
{
  DOBS("amorph constructor INCOSelect");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
INCOSelect::~INCOSelect()
{
  DOBS("destructor INCOSelect");
}
#endif

#if !defined(__DCO_STANDALONE)
void* INCOSelect::operator new(size_t size)
{
  DOBS("operator new INCOSelect");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(INCOSelect));
  return my_arena->alloc(size);
}

void INCOSelect::operator delete(void* v)
{
  DOBS("operator delete INCOSelect");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(INCOSelect));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void INCOSelect::packDataDiff(::dueca::AmorphStore& s, const INCOSelect& ref) const
{
  DOBS("packDataDiff INCOSelect");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->id, ref.id,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->name, ref.name,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->note, ref.note,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void INCOSelect::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData INCOSelect");

  ::unPackData(s, this->id);
  ::unPackData(s, this->name);
  ::unPackData(s, this->note);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void INCOSelect::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff INCOSelect");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->id, s, im);
  ::dueca::checkandunpackdiffsingle(this->name, s, im);
  ::dueca::checkandunpackdiffsingle(this->note, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool INCOSelect::operator == (const INCOSelect& other) const
{
  DOBS("operator == INCOSelect");
  if (this->id != other.id) return false;
  if (this->name != other.name) return false;
  if (this->note != other.note) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
INCOSelect&
INCOSelect::operator=(const INCOSelect& other)
{
  DOBS("operator = INCOSelect");
  if (this == &other) return *this;
  this->id = other.id;
  this->name = other.name;
  this->note = other.note;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void INCOSelect::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData INCOSelect");
  ::packData(s, this->id);
  ::packData(s, this->name);
  ::packData(s, this->note);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & INCOSelect::print(std::ostream& s) const
{
  s << "INCOSelect("
    << "id=" << this->id << ','
    << "name=" << this->name << ','
    << "note=" << this->note
    << ')';
  return s;
}
#endif


