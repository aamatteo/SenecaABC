/* ------------------------------------------------------------------ */
/*      item            : FlightControlInput.hxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : header file
        description     : DUECA Communication Object (DCO)
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#ifndef FlightControlInput_hxx
#define FlightControlInput_hxx

#include <inttypes.h>

#if !defined(__DCO_NOPACK)
namespace dueca {
class AmorphStore;
class AmorphReStore;
struct DataWriterArraySize;
};
#endif
#if !defined(__DCO_STANDALONE)
namespace dueca {
struct CommObjectDataTable;
};
#include <gencodegen.h>
#if GENCODEGEN != 110
#error "Generated FlightControlInput.hxx too old, please clean with 'make mrproper'"
#endif
#include <CommObjectTraits.hxx>
#endif
#include <iostream>




/** Command input to the flight control servos
    */
struct FlightControlInput
{
  /** typedef for internal reference */
  typedef FlightControlInput __ThisDCOType__;

public:
  /** The name of this class. */
  static const char* const classname;


  /** elevator input angle, radians */
  double de;

  /** aileron input angle, radians */
  double da;

  /** rudder input angle, radians */
  double dr;

  /** flap selection angle, radians */
  double df;

  /** gear extension, scaled 0 to 1?? */
  double gear;

  /** power lever 1 angle */
  double pla1;

  /** power lever 2 angle */
  double pla2;

  /** request for experimental control mode, enables above inputs according to
      configuration in control module */
  bool ecrequest;

public:
  /** a "magic" number, hashed out of the class definition,
      that will be used to check consistency of the sent objects
      across the dueca nodes. */
  static const uint32_t magic_check_number;

  /** default constructor. */
  FlightControlInput();

  /** Constructor with arguments */
  FlightControlInput(
        const double& de,
        const double& da,
        const double& dr,
        const double& df,
        const double& gear,
        const double& pla1,
        const double& pla2,
        const bool& ecrequest);

  /** copy constructor. */
  FlightControlInput(const FlightControlInput& o);

#if !defined(__DCO_NOPACK)
  /** constructor to restore an FlightControlInput from amorphous storage. */
  FlightControlInput(dueca::AmorphReStore& r);
#endif

  /** destructor. */
  ~FlightControlInput();

#if !defined(__DCO_STANDALONE)
  /** new operator "new", which places objects not on a
      heap, but in one of the memory arenas. This to speed up
      memory management. */
  static void* operator new(size_t size);

  /** new operator "delete", to go with the new version
      of operator new. */
  static void operator delete(void* p);

  /** placement "new", needed for stl. */
  inline static void* operator new(size_t size, FlightControlInput*& o)
  { return reinterpret_cast<void*>(o); }
#endif

#if !defined(__DCO_NOPACK)
  /** packs the FlightControlInput into amorphous storage. */
  void packData(::dueca::AmorphStore& s) const;

  /** packs the FlightControlInput into amorphous storage.
      only differences with a previous object are packed. */
  void packDataDiff(::dueca::AmorphStore& s, const FlightControlInput& ref) const;

  /** unpacks the FlightControlInput from an amorphous storage. */
  void unPackData(::dueca::AmorphReStore& s);

  /** unpacks the differences for FlightControlInput
      from an amorphous storage. */
  void unPackDataDiff(::dueca::AmorphReStore& s);
#endif

  /** Test for equality. */
  bool operator == (const FlightControlInput& o) const;

  /** Test for inequality. */
  inline bool operator != (const FlightControlInput& o) const
  { return !(*this == o); }

  /** Assignment operator. */
  FlightControlInput& operator=(const FlightControlInput& o);

  /** prints the FlightControlInput to a stream. */
  std::ostream & print(std::ostream& s) const;
};

#if !defined(__DCO_NOPACK)
/** pack the object into amorphous storage. */
inline void packData(::dueca::AmorphStore& s,
                     const FlightControlInput& o)
{ o.packData(s); }

/** pack the differences between this object and another
    into amorphous storage. */
inline void packDataDiff(dueca::AmorphStore& s,
                         const FlightControlInput& o,
                         const FlightControlInput& ref)
{ o.packDataDiff(s, ref); }

/** unpack the object from amorphous storage. */
inline void unPackData(::dueca::AmorphReStore& s,
                       FlightControlInput& o)
{ o.unPackData(s); }

/** unpack the differences to this object from storage. */
inline void unPackDataDiff(dueca::AmorphReStore& s,
                           FlightControlInput& o)
{ o.unPackDataDiff(s); }
#endif

namespace std {
/** print to a stream. */
inline std::ostream &
operator << (std::ostream& s, const FlightControlInput& o)
{ return o.print(s); }
};

#if !defined(__DCO_STANDALONE)
namespace dueca {
/** Template specialization, defines a trait that is needed if
    FlightControlInput is ever used inside other dco objects. */
template <>
struct dco_nested<FlightControlInput> : public dco_isnested { };
};
#endif


#endif
