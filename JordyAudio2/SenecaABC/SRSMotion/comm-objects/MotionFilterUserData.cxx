/* ------------------------------------------------------------------ */
/*      item            : MotionFilterUserData.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "MotionFilterUserData.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a MotionFilterUserData object
static ::dueca::CommObjectMemberAccess
  <MotionFilterUserData,dueca::fixvector<6,double> >
  MotionFilterUserData_member_data(&MotionFilterUserData::data, "data");

// assemble the above entries into a table in the order in which they
// appear in the MotionFilterUserData object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &MotionFilterUserData_member_data },
  { NULL }
};

#endif

// class name, static
const char * const MotionFilterUserData::classname = "MotionFilterUserData";

// magic number, hashed from class name and member names / classes
const uint32_t MotionFilterUserData::magic_check_number=0xcfdcbfe5;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (MotionFilterUserData::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<MotionFilterUserData>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
MotionFilterUserData::MotionFilterUserData()
{
  DOBS("default constructor MotionFilterUserData");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
MotionFilterUserData::MotionFilterUserData(
        const dueca::fixvector<6,double>& data) :
    data(data)
{
  DOBS("complete constructor MotionFilterUserData");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
MotionFilterUserData::MotionFilterUserData(const MotionFilterUserData& other):
    data(other.data)
{
  DOBS("copy constructor MotionFilterUserData");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
MotionFilterUserData::MotionFilterUserData(dueca::AmorphReStore& s)
{
  ::dueca::unpackiterable(s, this->data,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
  DOBS("amorph constructor MotionFilterUserData");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
MotionFilterUserData::~MotionFilterUserData()
{
  DOBS("destructor MotionFilterUserData");
}
#endif

#if !defined(__DCO_STANDALONE)
void* MotionFilterUserData::operator new(size_t size)
{
  DOBS("operator new MotionFilterUserData");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(MotionFilterUserData));
  return my_arena->alloc(size);
}

void MotionFilterUserData::operator delete(void* v)
{
  DOBS("operator delete MotionFilterUserData");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(MotionFilterUserData));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void MotionFilterUserData::packDataDiff(::dueca::AmorphStore& s, const MotionFilterUserData& ref) const
{
  DOBS("packDataDiff MotionFilterUserData");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffiterable(this->data, ref.data, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void MotionFilterUserData::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData MotionFilterUserData");


  ::dueca::unpackiterable(s, this->data,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void MotionFilterUserData::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff MotionFilterUserData");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffiterable(this->data, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool MotionFilterUserData::operator == (const MotionFilterUserData& other) const
{
  DOBS("operator == MotionFilterUserData");
  if (this->data != other.data) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
MotionFilterUserData&
MotionFilterUserData::operator=(const MotionFilterUserData& other)
{
  DOBS("operator = MotionFilterUserData");
  if (this == &other) return *this;
  this->data = other.data;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void MotionFilterUserData::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData MotionFilterUserData");
  ::dueca::packiterable(s, this->data,
                        dueca::pack_traits<dueca::fixvector<6,double> >()); 
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & MotionFilterUserData::print(std::ostream& s) const
{
  s << "MotionFilterUserData("
    << "data={";
  for (dueca::fixvector<6,double>::const_iterator ii = this->data.begin();
       ii != this->data.end(); ii++) {
    if (ii != this->data.begin()) s << ',';
    s << (*ii);
  }
  s << "}"
    << ')';
  return s;
}
#endif


