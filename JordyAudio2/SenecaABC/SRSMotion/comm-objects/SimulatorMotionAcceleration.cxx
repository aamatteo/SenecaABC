/* ------------------------------------------------------------------ */
/*      item            : SimulatorMotionAcceleration.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "SimulatorMotionAcceleration.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a SimulatorMotionAcceleration object
static ::dueca::CommObjectMemberAccess
  <SimulatorMotionAcceleration,double >
  SimulatorMotionAcceleration_member_xdotdot(&SimulatorMotionAcceleration::xdotdot, "xdotdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorMotionAcceleration,double >
  SimulatorMotionAcceleration_member_ydotdot(&SimulatorMotionAcceleration::ydotdot, "ydotdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorMotionAcceleration,double >
  SimulatorMotionAcceleration_member_zdotdot(&SimulatorMotionAcceleration::zdotdot, "zdotdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorMotionAcceleration,double >
  SimulatorMotionAcceleration_member_pdot(&SimulatorMotionAcceleration::pdot, "pdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorMotionAcceleration,double >
  SimulatorMotionAcceleration_member_qdot(&SimulatorMotionAcceleration::qdot, "qdot");
static ::dueca::CommObjectMemberAccess
  <SimulatorMotionAcceleration,double >
  SimulatorMotionAcceleration_member_rdot(&SimulatorMotionAcceleration::rdot, "rdot");

// assemble the above entries into a table in the order in which they
// appear in the SimulatorMotionAcceleration object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &SimulatorMotionAcceleration_member_xdotdot },
  { &SimulatorMotionAcceleration_member_ydotdot },
  { &SimulatorMotionAcceleration_member_zdotdot },
  { &SimulatorMotionAcceleration_member_pdot },
  { &SimulatorMotionAcceleration_member_qdot },
  { &SimulatorMotionAcceleration_member_rdot },
  { NULL }
};

#endif

// class name, static
const char * const SimulatorMotionAcceleration::classname = "SimulatorMotionAcceleration";

// magic number, hashed from class name and member names / classes
const uint32_t SimulatorMotionAcceleration::magic_check_number=0x98df68ab;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (SimulatorMotionAcceleration::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<SimulatorMotionAcceleration>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
SimulatorMotionAcceleration::SimulatorMotionAcceleration()
{
  DOBS("default constructor SimulatorMotionAcceleration");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
SimulatorMotionAcceleration::SimulatorMotionAcceleration(
        const double& xdotdot,
        const double& ydotdot,
        const double& zdotdot,
        const double& pdot,
        const double& qdot,
        const double& rdot) :
    xdotdot(xdotdot),
    ydotdot(ydotdot),
    zdotdot(zdotdot),
    pdot(pdot),
    qdot(qdot),
    rdot(rdot)
{
  DOBS("complete constructor SimulatorMotionAcceleration");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
SimulatorMotionAcceleration::SimulatorMotionAcceleration(const SimulatorMotionAcceleration& other):
    xdotdot(other.xdotdot),
    ydotdot(other.ydotdot),
    zdotdot(other.zdotdot),
    pdot(other.pdot),
    qdot(other.qdot),
    rdot(other.rdot)
{
  DOBS("copy constructor SimulatorMotionAcceleration");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
SimulatorMotionAcceleration::SimulatorMotionAcceleration(dueca::AmorphReStore& s):
        xdotdot(s),
        ydotdot(s),
        zdotdot(s),
        pdot(s),
        qdot(s),
        rdot(s)
{
  DOBS("amorph constructor SimulatorMotionAcceleration");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
SimulatorMotionAcceleration::~SimulatorMotionAcceleration()
{
  DOBS("destructor SimulatorMotionAcceleration");
}
#endif

#if !defined(__DCO_STANDALONE)
void* SimulatorMotionAcceleration::operator new(size_t size)
{
  DOBS("operator new SimulatorMotionAcceleration");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SimulatorMotionAcceleration));
  return my_arena->alloc(size);
}

void SimulatorMotionAcceleration::operator delete(void* v)
{
  DOBS("operator delete SimulatorMotionAcceleration");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SimulatorMotionAcceleration));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void SimulatorMotionAcceleration::packDataDiff(::dueca::AmorphStore& s, const SimulatorMotionAcceleration& ref) const
{
  DOBS("packDataDiff SimulatorMotionAcceleration");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->xdotdot, ref.xdotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ydotdot, ref.ydotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->zdotdot, ref.zdotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pdot, ref.pdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->qdot, ref.qdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->rdot, ref.rdot,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void SimulatorMotionAcceleration::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData SimulatorMotionAcceleration");

  ::unPackData(s, this->xdotdot);
  ::unPackData(s, this->ydotdot);
  ::unPackData(s, this->zdotdot);
  ::unPackData(s, this->pdot);
  ::unPackData(s, this->qdot);
  ::unPackData(s, this->rdot);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void SimulatorMotionAcceleration::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff SimulatorMotionAcceleration");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->xdotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->ydotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->zdotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->pdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->qdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->rdot, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool SimulatorMotionAcceleration::operator == (const SimulatorMotionAcceleration& other) const
{
  DOBS("operator == SimulatorMotionAcceleration");
  if (this->xdotdot != other.xdotdot) return false;
  if (this->ydotdot != other.ydotdot) return false;
  if (this->zdotdot != other.zdotdot) return false;
  if (this->pdot != other.pdot) return false;
  if (this->qdot != other.qdot) return false;
  if (this->rdot != other.rdot) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
SimulatorMotionAcceleration&
SimulatorMotionAcceleration::operator=(const SimulatorMotionAcceleration& other)
{
  DOBS("operator = SimulatorMotionAcceleration");
  if (this == &other) return *this;
  this->xdotdot = other.xdotdot;
  this->ydotdot = other.ydotdot;
  this->zdotdot = other.zdotdot;
  this->pdot = other.pdot;
  this->qdot = other.qdot;
  this->rdot = other.rdot;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void SimulatorMotionAcceleration::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData SimulatorMotionAcceleration");
  ::packData(s, this->xdotdot);
  ::packData(s, this->ydotdot);
  ::packData(s, this->zdotdot);
  ::packData(s, this->pdot);
  ::packData(s, this->qdot);
  ::packData(s, this->rdot);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & SimulatorMotionAcceleration::print(std::ostream& s) const
{
  s << "SimulatorMotionAcceleration("
    << "xdotdot=" << this->xdotdot << ','
    << "ydotdot=" << this->ydotdot << ','
    << "zdotdot=" << this->zdotdot << ','
    << "pdot=" << this->pdot << ','
    << "qdot=" << this->qdot << ','
    << "rdot=" << this->rdot
    << ')';
  return s;
}
#endif


