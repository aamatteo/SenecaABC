/* ------------------------------------------------------------------ */
/*      item            : MotionGimbalPositions.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "MotionGimbalPositions.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a MotionGimbalPositions object
static ::dueca::CommObjectMemberAccess
  <MotionGimbalPositions,int >
  MotionGimbalPositions_member_status(&MotionGimbalPositions::status, "status");
static ::dueca::CommObjectMemberAccess
  <MotionGimbalPositions,dueca::fixvector<6,double> >
  MotionGimbalPositions_member_x(&MotionGimbalPositions::x, "x");
static ::dueca::CommObjectMemberAccess
  <MotionGimbalPositions,dueca::fixvector<6,double> >
  MotionGimbalPositions_member_y(&MotionGimbalPositions::y, "y");
static ::dueca::CommObjectMemberAccess
  <MotionGimbalPositions,dueca::fixvector<6,double> >
  MotionGimbalPositions_member_z(&MotionGimbalPositions::z, "z");

// assemble the above entries into a table in the order in which they
// appear in the MotionGimbalPositions object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &MotionGimbalPositions_member_status },
  { &MotionGimbalPositions_member_x },
  { &MotionGimbalPositions_member_y },
  { &MotionGimbalPositions_member_z },
  { NULL }
};

#endif

// class name, static
const char * const MotionGimbalPositions::classname = "MotionGimbalPositions";

// magic number, hashed from class name and member names / classes
const uint32_t MotionGimbalPositions::magic_check_number=0xed262d6f;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (MotionGimbalPositions::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<MotionGimbalPositions>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
MotionGimbalPositions::MotionGimbalPositions()
{
  DOBS("default constructor MotionGimbalPositions");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
MotionGimbalPositions::MotionGimbalPositions(
        const int& status,
        const dueca::fixvector<6,double>& x,
        const dueca::fixvector<6,double>& y,
        const dueca::fixvector<6,double>& z) :
    status(status),
    x(x),
    y(y),
    z(z)
{
  DOBS("complete constructor MotionGimbalPositions");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
MotionGimbalPositions::MotionGimbalPositions(
        const int& status) :
    status(status)
{
  DOBS("complete single argument constructor MotionGimbalPositions");
}
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
MotionGimbalPositions::MotionGimbalPositions(const MotionGimbalPositions& other):
    status(other.status),
    x(other.x),
    y(other.y),
    z(other.z)
{
  DOBS("copy constructor MotionGimbalPositions");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
MotionGimbalPositions::MotionGimbalPositions(dueca::AmorphReStore& s):
        status(s)
{
  ::dueca::unpackiterable(s, this->x,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
  ::dueca::unpackiterable(s, this->y,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
  ::dueca::unpackiterable(s, this->z,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
  DOBS("amorph constructor MotionGimbalPositions");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
MotionGimbalPositions::~MotionGimbalPositions()
{
  DOBS("destructor MotionGimbalPositions");
}
#endif

#if !defined(__DCO_STANDALONE)
void* MotionGimbalPositions::operator new(size_t size)
{
  DOBS("operator new MotionGimbalPositions");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(MotionGimbalPositions));
  return my_arena->alloc(size);
}

void MotionGimbalPositions::operator delete(void* v)
{
  DOBS("operator delete MotionGimbalPositions");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(MotionGimbalPositions));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void MotionGimbalPositions::packDataDiff(::dueca::AmorphStore& s, const MotionGimbalPositions& ref) const
{
  DOBS("packDataDiff MotionGimbalPositions");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->status, ref.status,
                         s, im);
  ::dueca::checkandpackdiffiterable(this->x, ref.x, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
  ::dueca::checkandpackdiffiterable(this->y, ref.y, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
  ::dueca::checkandpackdiffiterable(this->z, ref.z, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void MotionGimbalPositions::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData MotionGimbalPositions");

  ::unPackData(s, this->status);

  ::dueca::unpackiterable(s, this->x,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
  ::dueca::unpackiterable(s, this->y,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
  ::dueca::unpackiterable(s, this->z,
                          dueca::pack_traits<dueca::fixvector<6,double> >()); 
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void MotionGimbalPositions::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff MotionGimbalPositions");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->status, s, im);
  ::dueca::checkandunpackdiffiterable(this->x, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
  ::dueca::checkandunpackdiffiterable(this->y, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
  ::dueca::checkandunpackdiffiterable(this->z, s, im,
                          dueca::diffpack_traits<dueca::fixvector<6,double> >());
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool MotionGimbalPositions::operator == (const MotionGimbalPositions& other) const
{
  DOBS("operator == MotionGimbalPositions");
  if (this->status != other.status) return false;
  if (this->x != other.x) return false;
  if (this->y != other.y) return false;
  if (this->z != other.z) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
MotionGimbalPositions&
MotionGimbalPositions::operator=(const MotionGimbalPositions& other)
{
  DOBS("operator = MotionGimbalPositions");
  if (this == &other) return *this;
  this->status = other.status;
  this->x = other.x;
  this->y = other.y;
  this->z = other.z;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void MotionGimbalPositions::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData MotionGimbalPositions");
  ::packData(s, this->status);
  ::dueca::packiterable(s, this->x,
                        dueca::pack_traits<dueca::fixvector<6,double> >()); 
  ::dueca::packiterable(s, this->y,
                        dueca::pack_traits<dueca::fixvector<6,double> >()); 
  ::dueca::packiterable(s, this->z,
                        dueca::pack_traits<dueca::fixvector<6,double> >()); 
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & MotionGimbalPositions::print(std::ostream& s) const
{
  s << "MotionGimbalPositions("
    << "status=" << this->status << ','
    << "x={";
  for (dueca::fixvector<6,double>::const_iterator ii = this->x.begin();
       ii != this->x.end(); ii++) {
    if (ii != this->x.begin()) s << ',';
    s << (*ii);
  }
  s << "},"
    << "y={";
  for (dueca::fixvector<6,double>::const_iterator ii = this->y.begin();
       ii != this->y.end(); ii++) {
    if (ii != this->y.begin()) s << ',';
    s << (*ii);
  }
  s << "},"
    << "z={";
  for (dueca::fixvector<6,double>::const_iterator ii = this->z.begin();
       ii != this->z.end(); ii++) {
    if (ii != this->z.begin()) s << ',';
    s << (*ii);
  }
  s << "}"
    << ')';
  return s;
}
#endif


