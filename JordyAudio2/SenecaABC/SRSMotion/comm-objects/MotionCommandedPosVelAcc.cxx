/* ------------------------------------------------------------------ */
/*      item            : MotionCommandedPosVelAcc.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "MotionCommandedPosVelAcc.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a MotionCommandedPosVelAcc object
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,int >
  MotionCommandedPosVelAcc_member_status(&MotionCommandedPosVelAcc::status, "status");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_x(&MotionCommandedPosVelAcc::x, "x");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_y(&MotionCommandedPosVelAcc::y, "y");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_z(&MotionCommandedPosVelAcc::z, "z");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_phi(&MotionCommandedPosVelAcc::phi, "phi");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_theta(&MotionCommandedPosVelAcc::theta, "theta");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_psi(&MotionCommandedPosVelAcc::psi, "psi");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_xdot(&MotionCommandedPosVelAcc::xdot, "xdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_ydot(&MotionCommandedPosVelAcc::ydot, "ydot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_zdot(&MotionCommandedPosVelAcc::zdot, "zdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_p(&MotionCommandedPosVelAcc::p, "p");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_q(&MotionCommandedPosVelAcc::q, "q");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_r(&MotionCommandedPosVelAcc::r, "r");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_xdotdot(&MotionCommandedPosVelAcc::xdotdot, "xdotdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_ydotdot(&MotionCommandedPosVelAcc::ydotdot, "ydotdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_zdotdot(&MotionCommandedPosVelAcc::zdotdot, "zdotdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_pdot(&MotionCommandedPosVelAcc::pdot, "pdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_qdot(&MotionCommandedPosVelAcc::qdot, "qdot");
static ::dueca::CommObjectMemberAccess
  <MotionCommandedPosVelAcc,double >
  MotionCommandedPosVelAcc_member_rdot(&MotionCommandedPosVelAcc::rdot, "rdot");

// assemble the above entries into a table in the order in which they
// appear in the MotionCommandedPosVelAcc object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &MotionCommandedPosVelAcc_member_status },
  { &MotionCommandedPosVelAcc_member_x },
  { &MotionCommandedPosVelAcc_member_y },
  { &MotionCommandedPosVelAcc_member_z },
  { &MotionCommandedPosVelAcc_member_phi },
  { &MotionCommandedPosVelAcc_member_theta },
  { &MotionCommandedPosVelAcc_member_psi },
  { &MotionCommandedPosVelAcc_member_xdot },
  { &MotionCommandedPosVelAcc_member_ydot },
  { &MotionCommandedPosVelAcc_member_zdot },
  { &MotionCommandedPosVelAcc_member_p },
  { &MotionCommandedPosVelAcc_member_q },
  { &MotionCommandedPosVelAcc_member_r },
  { &MotionCommandedPosVelAcc_member_xdotdot },
  { &MotionCommandedPosVelAcc_member_ydotdot },
  { &MotionCommandedPosVelAcc_member_zdotdot },
  { &MotionCommandedPosVelAcc_member_pdot },
  { &MotionCommandedPosVelAcc_member_qdot },
  { &MotionCommandedPosVelAcc_member_rdot },
  { NULL }
};

#endif

// class name, static
const char * const MotionCommandedPosVelAcc::classname = "MotionCommandedPosVelAcc";

// magic number, hashed from class name and member names / classes
const uint32_t MotionCommandedPosVelAcc::magic_check_number=0x5a0ee8e3;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (MotionCommandedPosVelAcc::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<MotionCommandedPosVelAcc>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
MotionCommandedPosVelAcc::MotionCommandedPosVelAcc()
{
  DOBS("default constructor MotionCommandedPosVelAcc");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
MotionCommandedPosVelAcc::MotionCommandedPosVelAcc(
        const int& status,
        const double& x,
        const double& y,
        const double& z,
        const double& phi,
        const double& theta,
        const double& psi,
        const double& xdot,
        const double& ydot,
        const double& zdot,
        const double& p,
        const double& q,
        const double& r,
        const double& xdotdot,
        const double& ydotdot,
        const double& zdotdot,
        const double& pdot,
        const double& qdot,
        const double& rdot) :
    status(status),
    x(x),
    y(y),
    z(z),
    phi(phi),
    theta(theta),
    psi(psi),
    xdot(xdot),
    ydot(ydot),
    zdot(zdot),
    p(p),
    q(q),
    r(r),
    xdotdot(xdotdot),
    ydotdot(ydotdot),
    zdotdot(zdotdot),
    pdot(pdot),
    qdot(qdot),
    rdot(rdot)
{
  DOBS("complete constructor MotionCommandedPosVelAcc");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
MotionCommandedPosVelAcc::MotionCommandedPosVelAcc(const MotionCommandedPosVelAcc& other):
    status(other.status),
    x(other.x),
    y(other.y),
    z(other.z),
    phi(other.phi),
    theta(other.theta),
    psi(other.psi),
    xdot(other.xdot),
    ydot(other.ydot),
    zdot(other.zdot),
    p(other.p),
    q(other.q),
    r(other.r),
    xdotdot(other.xdotdot),
    ydotdot(other.ydotdot),
    zdotdot(other.zdotdot),
    pdot(other.pdot),
    qdot(other.qdot),
    rdot(other.rdot)
{
  DOBS("copy constructor MotionCommandedPosVelAcc");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
MotionCommandedPosVelAcc::MotionCommandedPosVelAcc(dueca::AmorphReStore& s):
        status(s),
        x(s),
        y(s),
        z(s),
        phi(s),
        theta(s),
        psi(s),
        xdot(s),
        ydot(s),
        zdot(s),
        p(s),
        q(s),
        r(s),
        xdotdot(s),
        ydotdot(s),
        zdotdot(s),
        pdot(s),
        qdot(s),
        rdot(s)
{
  DOBS("amorph constructor MotionCommandedPosVelAcc");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
MotionCommandedPosVelAcc::~MotionCommandedPosVelAcc()
{
  DOBS("destructor MotionCommandedPosVelAcc");
}
#endif

#if !defined(__DCO_STANDALONE)
void* MotionCommandedPosVelAcc::operator new(size_t size)
{
  DOBS("operator new MotionCommandedPosVelAcc");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(MotionCommandedPosVelAcc));
  return my_arena->alloc(size);
}

void MotionCommandedPosVelAcc::operator delete(void* v)
{
  DOBS("operator delete MotionCommandedPosVelAcc");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(MotionCommandedPosVelAcc));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void MotionCommandedPosVelAcc::packDataDiff(::dueca::AmorphStore& s, const MotionCommandedPosVelAcc& ref) const
{
  DOBS("packDataDiff MotionCommandedPosVelAcc");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->status, ref.status,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->x, ref.x,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->y, ref.y,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->z, ref.z,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->phi, ref.phi,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->theta, ref.theta,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->psi, ref.psi,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->xdot, ref.xdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ydot, ref.ydot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->zdot, ref.zdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->p, ref.p,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->q, ref.q,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->r, ref.r,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->xdotdot, ref.xdotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->ydotdot, ref.ydotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->zdotdot, ref.zdotdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pdot, ref.pdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->qdot, ref.qdot,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->rdot, ref.rdot,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void MotionCommandedPosVelAcc::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData MotionCommandedPosVelAcc");

  ::unPackData(s, this->status);
  ::unPackData(s, this->x);
  ::unPackData(s, this->y);
  ::unPackData(s, this->z);
  ::unPackData(s, this->phi);
  ::unPackData(s, this->theta);
  ::unPackData(s, this->psi);
  ::unPackData(s, this->xdot);
  ::unPackData(s, this->ydot);
  ::unPackData(s, this->zdot);
  ::unPackData(s, this->p);
  ::unPackData(s, this->q);
  ::unPackData(s, this->r);
  ::unPackData(s, this->xdotdot);
  ::unPackData(s, this->ydotdot);
  ::unPackData(s, this->zdotdot);
  ::unPackData(s, this->pdot);
  ::unPackData(s, this->qdot);
  ::unPackData(s, this->rdot);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void MotionCommandedPosVelAcc::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff MotionCommandedPosVelAcc");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->status, s, im);
  ::dueca::checkandunpackdiffsingle(this->x, s, im);
  ::dueca::checkandunpackdiffsingle(this->y, s, im);
  ::dueca::checkandunpackdiffsingle(this->z, s, im);
  ::dueca::checkandunpackdiffsingle(this->phi, s, im);
  ::dueca::checkandunpackdiffsingle(this->theta, s, im);
  ::dueca::checkandunpackdiffsingle(this->psi, s, im);
  ::dueca::checkandunpackdiffsingle(this->xdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->ydot, s, im);
  ::dueca::checkandunpackdiffsingle(this->zdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->p, s, im);
  ::dueca::checkandunpackdiffsingle(this->q, s, im);
  ::dueca::checkandunpackdiffsingle(this->r, s, im);
  ::dueca::checkandunpackdiffsingle(this->xdotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->ydotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->zdotdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->pdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->qdot, s, im);
  ::dueca::checkandunpackdiffsingle(this->rdot, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool MotionCommandedPosVelAcc::operator == (const MotionCommandedPosVelAcc& other) const
{
  DOBS("operator == MotionCommandedPosVelAcc");
  if (this->status != other.status) return false;
  if (this->x != other.x) return false;
  if (this->y != other.y) return false;
  if (this->z != other.z) return false;
  if (this->phi != other.phi) return false;
  if (this->theta != other.theta) return false;
  if (this->psi != other.psi) return false;
  if (this->xdot != other.xdot) return false;
  if (this->ydot != other.ydot) return false;
  if (this->zdot != other.zdot) return false;
  if (this->p != other.p) return false;
  if (this->q != other.q) return false;
  if (this->r != other.r) return false;
  if (this->xdotdot != other.xdotdot) return false;
  if (this->ydotdot != other.ydotdot) return false;
  if (this->zdotdot != other.zdotdot) return false;
  if (this->pdot != other.pdot) return false;
  if (this->qdot != other.qdot) return false;
  if (this->rdot != other.rdot) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
MotionCommandedPosVelAcc&
MotionCommandedPosVelAcc::operator=(const MotionCommandedPosVelAcc& other)
{
  DOBS("operator = MotionCommandedPosVelAcc");
  if (this == &other) return *this;
  this->status = other.status;
  this->x = other.x;
  this->y = other.y;
  this->z = other.z;
  this->phi = other.phi;
  this->theta = other.theta;
  this->psi = other.psi;
  this->xdot = other.xdot;
  this->ydot = other.ydot;
  this->zdot = other.zdot;
  this->p = other.p;
  this->q = other.q;
  this->r = other.r;
  this->xdotdot = other.xdotdot;
  this->ydotdot = other.ydotdot;
  this->zdotdot = other.zdotdot;
  this->pdot = other.pdot;
  this->qdot = other.qdot;
  this->rdot = other.rdot;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void MotionCommandedPosVelAcc::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData MotionCommandedPosVelAcc");
  ::packData(s, this->status);
  ::packData(s, this->x);
  ::packData(s, this->y);
  ::packData(s, this->z);
  ::packData(s, this->phi);
  ::packData(s, this->theta);
  ::packData(s, this->psi);
  ::packData(s, this->xdot);
  ::packData(s, this->ydot);
  ::packData(s, this->zdot);
  ::packData(s, this->p);
  ::packData(s, this->q);
  ::packData(s, this->r);
  ::packData(s, this->xdotdot);
  ::packData(s, this->ydotdot);
  ::packData(s, this->zdotdot);
  ::packData(s, this->pdot);
  ::packData(s, this->qdot);
  ::packData(s, this->rdot);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & MotionCommandedPosVelAcc::print(std::ostream& s) const
{
  s << "MotionCommandedPosVelAcc("
    << "status=" << this->status << ','
    << "x=" << this->x << ','
    << "y=" << this->y << ','
    << "z=" << this->z << ','
    << "phi=" << this->phi << ','
    << "theta=" << this->theta << ','
    << "psi=" << this->psi << ','
    << "xdot=" << this->xdot << ','
    << "ydot=" << this->ydot << ','
    << "zdot=" << this->zdot << ','
    << "p=" << this->p << ','
    << "q=" << this->q << ','
    << "r=" << this->r << ','
    << "xdotdot=" << this->xdotdot << ','
    << "ydotdot=" << this->ydotdot << ','
    << "zdotdot=" << this->zdotdot << ','
    << "pdot=" << this->pdot << ','
    << "qdot=" << this->qdot << ','
    << "rdot=" << this->rdot
    << ')';
  return s;
}
#endif


