/* ------------------------------------------------------------------ */
/*      item            : BaseObjectPosition.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "BaseObjectPosition.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif
#ifdef DUECA_CONFIG_HDF5
#include <hdf5utils/HDF5Templates.hxx>
#endif




// Additional custom code
#include "BaseObjectPositionExtra.cxx"

// if any custom implementations have been defined, for packing,
// unpacking, construction or deletion, verify that the
// custom code is compatible with the current generation
#if defined(__CUSTOM_DEFAULT_CONSTRUCTOR) || \
    defined(__CUSTOM_FULL_CONSTRUCTOR) || \
    defined(__CUSTOM_FULLSINGLES_CONSTRUCTOR) || \
    defined(__CUSTOM_COPY_CONSTRUCTOR) || \
    defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) || \
    defined(__CUSTOM_ARRAYS_SIZE_INIT_CONSTRUCTOR) || \
    defined(__CUSTOM_DESTRUCTOR) || \
    defined(__CUSTOM_FUNCTION_PACKDATADIFF) || \
    defined(__CUSTOM_FUNCTION_UNPACKDATA) || \
    defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) || \
    defined(__CUSTOM_FUNCTION_PACKDATA) || \
    defined(__CUSTOM_HDF5_WRITE_FUNCTOR) || \
    defined(__CUSTOM_HDF5_READ_FUNCTOR)
#ifndef __CUSTOM_COMPATLEVEL_110
#error "Verify that your custom code is compatible with version 110. Then define __CUSTOM_COMPATLEVEL_110"
#endif
#endif
#define DUECA_HDF_CODEGEN_VERSION 1
#if defined(__CUSTOM_HDF5_WRITE_FUNCTOR) || \
    defined(__CUSTOM_HDF5_READ_FUNCTOR)
#ifndef __CUSTOM_COMPATLEVEL_HDF_1
#error "Verify custom hdf code compatibility with version 1.\
 Then define __CUSTOM_COMPATLEVEL_HDF_1"
#endif
#endif



#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a BaseObjectPosition object
static ::dueca::CommObjectMemberAccess
  <BaseObjectPosition,dueca::fixvector<4,double> >
  BaseObjectPosition_member_attitude_q(&BaseObjectPosition::attitude_q, "attitude_q");
static ::dueca::CommObjectMemberAccess
  <BaseObjectPosition,dueca::fixvector<3,double> >
  BaseObjectPosition_member_xyz(&BaseObjectPosition::xyz, "xyz");

// assemble the above entries into a table in the order in which they
// appear in the BaseObjectPosition object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &BaseObjectPosition_member_attitude_q },
  { &BaseObjectPosition_member_xyz },
  { NULL }
};

#endif

// class name, static
const char * const BaseObjectPosition::classname = "BaseObjectPosition";

// magic number, hashed from class name and member names / classes
const uint32_t BaseObjectPosition::magic_check_number=0x3b6b58f8;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (BaseObjectPosition::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<BaseObjectPosition>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
BaseObjectPosition::BaseObjectPosition():
    attitude_q(0.0),
    xyz(0.0)
{
  attitude_q[0] = 1.0;
  DOBS("default constructor BaseObjectPosition");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
BaseObjectPosition::BaseObjectPosition(
        const dueca::fixvector<4,double>& attitude_q,
        const dueca::fixvector<3,double>& xyz) :
    attitude_q(attitude_q),
    xyz(xyz)
{
  DOBS("complete constructor BaseObjectPosition");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
BaseObjectPosition::BaseObjectPosition(const BaseObjectPosition& other):
    attitude_q(other.attitude_q),
    xyz(other.xyz)
{
  DOBS("copy constructor BaseObjectPosition");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
BaseObjectPosition::BaseObjectPosition(dueca::AmorphReStore& s)
{
  ::dueca::unpackiterable(s, this->attitude_q,
                          dueca::pack_traits<dueca::fixvector<4,double> >()); 
  ::dueca::unpackiterable(s, this->xyz,
                          dueca::pack_traits<dueca::fixvector<3,double> >()); 
  DOBS("amorph constructor BaseObjectPosition");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
BaseObjectPosition::~BaseObjectPosition()
{
  DOBS("destructor BaseObjectPosition");
}
#endif

#if !defined(__DCO_STANDALONE)
void* BaseObjectPosition::operator new(size_t size)
{
  DOBS("operator new BaseObjectPosition");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(BaseObjectPosition));
  return my_arena->alloc(size);
}

void BaseObjectPosition::operator delete(void* v)
{
  DOBS("operator delete BaseObjectPosition");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(BaseObjectPosition));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void BaseObjectPosition::packDataDiff(::dueca::AmorphStore& s, const BaseObjectPosition& ref) const
{
  DOBS("packDataDiff BaseObjectPosition");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffiterable(this->attitude_q, ref.attitude_q, s, im,
                          dueca::diffpack_traits<dueca::fixvector<4,double> >());
  ::dueca::checkandpackdiffiterable(this->xyz, ref.xyz, s, im,
                          dueca::diffpack_traits<dueca::fixvector<3,double> >());
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void BaseObjectPosition::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData BaseObjectPosition");


  ::dueca::unpackiterable(s, this->attitude_q,
                          dueca::pack_traits<dueca::fixvector<4,double> >()); 
  ::dueca::unpackiterable(s, this->xyz,
                          dueca::pack_traits<dueca::fixvector<3,double> >()); 
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void BaseObjectPosition::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff BaseObjectPosition");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffiterable(this->attitude_q, s, im,
                          dueca::diffpack_traits<dueca::fixvector<4,double> >());
  ::dueca::checkandunpackdiffiterable(this->xyz, s, im,
                          dueca::diffpack_traits<dueca::fixvector<3,double> >());
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool BaseObjectPosition::operator == (const BaseObjectPosition& other) const
{
  DOBS("operator == BaseObjectPosition");
  if (this->attitude_q != other.attitude_q) return false;
  if (this->xyz != other.xyz) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
BaseObjectPosition&
BaseObjectPosition::operator=(const BaseObjectPosition& other)
{
  DOBS("operator = BaseObjectPosition");
  if (this == &other) return *this;
  this->attitude_q = other.attitude_q;
  this->xyz = other.xyz;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void BaseObjectPosition::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData BaseObjectPosition");
  ::dueca::packiterable(s, this->attitude_q,
                        dueca::pack_traits<dueca::fixvector<4,double> >()); 
  ::dueca::packiterable(s, this->xyz,
                        dueca::pack_traits<dueca::fixvector<3,double> >()); 
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & BaseObjectPosition::print(std::ostream& s) const
{
  s << "BaseObjectPosition("
    << "attitude_q={";
  for (dueca::fixvector<4,double>::const_iterator ii = this->attitude_q.begin();
       ii != this->attitude_q.end(); ii++) {
    if (ii != this->attitude_q.begin()) s << ',';
    s << (*ii);
  }
  s << "},"
    << "xyz={";
  for (dueca::fixvector<3,double>::const_iterator ii = this->xyz.begin();
       ii != this->xyz.end(); ii++) {
    if (ii != this->xyz.begin()) s << ',';
    s << (*ii);
  }
  s << "}"
    << ')';
  return s;
}
#endif


#if defined(DUECA_CONFIG_HDF5)
// guarded in a separate namespace
namespace BaseObjectPosition_space {

#if !defined(__CUSTOM_HDF5_WRITE_FUNCTOR)
  HDF5DCOWriteFunctor::
  HDF5DCOWriteFunctor(boost::weak_ptr<H5::H5File> file,
                      const std::string& path,
                      size_t chunksize,
                      const std::string& label,
                      bool compress, bool writeticks,
                      const dueca::DataTimeSpec* startend) :
    dueca::hdf5log::HDF5DCOWriteFunctor(file, path, chunksize, label,
                               2, compress, writeticks,
                               startend)
  {
    // add memspaces for all elements

    this->configureDataSet(0, "/data/attitude_q",
                           HOFFSET(BaseObjectPosition, attitude_q),
                           dueca::get_hdf5_elt_type(example.attitude_q),
                           dueca::get_hdf5_elt_length(example.attitude_q));

    this->configureDataSet(1, "/data/xyz",
                           HOFFSET(BaseObjectPosition, xyz),
                           dueca::get_hdf5_elt_type(example.xyz),
                           dueca::get_hdf5_elt_length(example.xyz));

    if (writeticks) {
      dueca::TimeTickType tex;
      this->configureDataSet(2, "/tick", 0,
                             dueca::get_hdf5_elt_type(tex), 1);
    }
  }

  // the functor member used by channel reading code, writes data in HDF5 file
  bool HDF5DCOWriteFunctor::operator() (const void* dpointer,
                                        const dueca::DataTimeSpec& ts)
  {
    while (ts.getValidityEnd() <= startend->getValidityStart()) {
      return true;
    }
    if (ts.getValidityStart() >= startend->getValidityEnd()) {
      return false;
    }
    this->prepareRow();

    this->sets[0].writeNew(dpointer, chunkidx, example.attitude_q);

    this->sets[1].writeNew(dpointer, chunkidx, example.xyz);

    if (writeticks) {
      this->sets[2].writeNew(&ts);
    }
    return true;
  }
#endif


#if !defined(__CUSTOM_HDF5_READ_FUNCTOR)
  HDF5DCOReadFunctor::
  HDF5DCOReadFunctor(boost::weak_ptr<H5::H5File> file,
                     const std::string& path,
                     bool readticks) :
    dueca::hdf5log::HDF5DCOReadFunctor(file, path,
                              2, readticks)
  {
    // add memspaces for all elements

    this->configureDataSet(0, "/data/attitude_q",
                           HOFFSET(BaseObjectPosition, attitude_q),
                           dueca::get_hdf5_elt_type(example.attitude_q),
                           dueca::get_hdf5_elt_length(example.attitude_q));

    this->configureDataSet(1, "/data/xyz",
                           HOFFSET(BaseObjectPosition, xyz),
                           dueca::get_hdf5_elt_type(example.xyz),
                           dueca::get_hdf5_elt_length(example.xyz));

    if (readticks) {
      dueca::TimeTickType tex;
      this->configureDataSet(2, "/tick", 0,
                             dueca::get_hdf5_elt_type(tex), 1);
    }
  }

  bool HDF5DCOReadFunctor::operator() (void* dpointer)
  {

    this->sets[0].readObjectPart(dpointer, example.attitude_q);

    this->sets[1].readObjectPart(dpointer, example.xyz);

    return true;
  }
#endif


  /** Metafunctor, can be accessed through the table, and can
      produce a functor object and the HDF5 data type */
  class HDF5DCOMetaFunctor: public dueca::hdf5log::HDF5DCOMetaFunctor
  {
    HDF5DCOWriteFunctor* getWriteFunctor(boost::weak_ptr<H5::H5File> file,
                                         const std::string& path,
                                         size_t chunksize,
                                         const std::string& label,
                                         const dueca::DataTimeSpec* startend,
                                         bool compress,
                                         bool writeticks=true)
    {
      return new HDF5DCOWriteFunctor(file, path, chunksize, label,
                                     compress, writeticks, startend);
    }

    HDF5DCOReadFunctor* getReadFunctor(boost::weak_ptr<H5::H5File> file,
                                       const std::string& path,
                                       bool writeticks=true)
    {
      return new HDF5DCOReadFunctor(file, path, writeticks);
    }

  };

#if !defined(__DCO_STANDALONE)
  // loads the metafunctor in the table
  static dueca::LoadMetaFunctor<HDF5DCOMetaFunctor>
    load_functor(functortable, "hdf5");
#endif
} // end namespace BaseObjectPosition_space
#endif

