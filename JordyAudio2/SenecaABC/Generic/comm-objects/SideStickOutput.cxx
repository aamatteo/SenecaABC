/* ------------------------------------------------------------------ */
/*      item            : SideStickOutput.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "SideStickOutput.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a SideStickOutput object
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_fwd_pos(&SideStickOutput::pitch_fwd_pos, "pitch_fwd_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_fwd_vel(&SideStickOutput::pitch_fwd_vel, "pitch_fwd_vel");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_act_force(&SideStickOutput::pitch_act_force, "pitch_act_force");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_cable_force(&SideStickOutput::pitch_cable_force, "pitch_cable_force");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_trim_pos(&SideStickOutput::pitch_trim_pos, "pitch_trim_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_aft_pos(&SideStickOutput::pitch_aft_pos, "pitch_aft_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_pitch_act_pos(&SideStickOutput::pitch_act_pos, "pitch_act_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_fwd_pos(&SideStickOutput::roll_fwd_pos, "roll_fwd_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_fwd_vel(&SideStickOutput::roll_fwd_vel, "roll_fwd_vel");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_act_force(&SideStickOutput::roll_act_force, "roll_act_force");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_cable_force(&SideStickOutput::roll_cable_force, "roll_cable_force");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_trim_pos(&SideStickOutput::roll_trim_pos, "roll_trim_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_aft_pos(&SideStickOutput::roll_aft_pos, "roll_aft_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickOutput,float >
  SideStickOutput_member_roll_act_pos(&SideStickOutput::roll_act_pos, "roll_act_pos");

// assemble the above entries into a table in the order in which they
// appear in the SideStickOutput object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &SideStickOutput_member_pitch_fwd_pos },
  { &SideStickOutput_member_pitch_fwd_vel },
  { &SideStickOutput_member_pitch_act_force },
  { &SideStickOutput_member_pitch_cable_force },
  { &SideStickOutput_member_pitch_trim_pos },
  { &SideStickOutput_member_pitch_aft_pos },
  { &SideStickOutput_member_pitch_act_pos },
  { &SideStickOutput_member_roll_fwd_pos },
  { &SideStickOutput_member_roll_fwd_vel },
  { &SideStickOutput_member_roll_act_force },
  { &SideStickOutput_member_roll_cable_force },
  { &SideStickOutput_member_roll_trim_pos },
  { &SideStickOutput_member_roll_aft_pos },
  { &SideStickOutput_member_roll_act_pos },
  { NULL }
};

#endif

// class name, static
const char * const SideStickOutput::classname = "SideStickOutput";

// magic number, hashed from class name and member names / classes
const uint32_t SideStickOutput::magic_check_number=0xbb79019a;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (SideStickOutput::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<SideStickOutput>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
SideStickOutput::SideStickOutput()
{
  DOBS("default constructor SideStickOutput");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
SideStickOutput::SideStickOutput(
        const float& pitch_fwd_pos,
        const float& pitch_fwd_vel,
        const float& pitch_act_force,
        const float& pitch_cable_force,
        const float& pitch_trim_pos,
        const float& pitch_aft_pos,
        const float& pitch_act_pos,
        const float& roll_fwd_pos,
        const float& roll_fwd_vel,
        const float& roll_act_force,
        const float& roll_cable_force,
        const float& roll_trim_pos,
        const float& roll_aft_pos,
        const float& roll_act_pos) :
    pitch_fwd_pos(pitch_fwd_pos),
    pitch_fwd_vel(pitch_fwd_vel),
    pitch_act_force(pitch_act_force),
    pitch_cable_force(pitch_cable_force),
    pitch_trim_pos(pitch_trim_pos),
    pitch_aft_pos(pitch_aft_pos),
    pitch_act_pos(pitch_act_pos),
    roll_fwd_pos(roll_fwd_pos),
    roll_fwd_vel(roll_fwd_vel),
    roll_act_force(roll_act_force),
    roll_cable_force(roll_cable_force),
    roll_trim_pos(roll_trim_pos),
    roll_aft_pos(roll_aft_pos),
    roll_act_pos(roll_act_pos)
{
  DOBS("complete constructor SideStickOutput");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
SideStickOutput::SideStickOutput(const SideStickOutput& other):
    pitch_fwd_pos(other.pitch_fwd_pos),
    pitch_fwd_vel(other.pitch_fwd_vel),
    pitch_act_force(other.pitch_act_force),
    pitch_cable_force(other.pitch_cable_force),
    pitch_trim_pos(other.pitch_trim_pos),
    pitch_aft_pos(other.pitch_aft_pos),
    pitch_act_pos(other.pitch_act_pos),
    roll_fwd_pos(other.roll_fwd_pos),
    roll_fwd_vel(other.roll_fwd_vel),
    roll_act_force(other.roll_act_force),
    roll_cable_force(other.roll_cable_force),
    roll_trim_pos(other.roll_trim_pos),
    roll_aft_pos(other.roll_aft_pos),
    roll_act_pos(other.roll_act_pos)
{
  DOBS("copy constructor SideStickOutput");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
SideStickOutput::SideStickOutput(dueca::AmorphReStore& s):
        pitch_fwd_pos(s),
        pitch_fwd_vel(s),
        pitch_act_force(s),
        pitch_cable_force(s),
        pitch_trim_pos(s),
        pitch_aft_pos(s),
        pitch_act_pos(s),
        roll_fwd_pos(s),
        roll_fwd_vel(s),
        roll_act_force(s),
        roll_cable_force(s),
        roll_trim_pos(s),
        roll_aft_pos(s),
        roll_act_pos(s)
{
  DOBS("amorph constructor SideStickOutput");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
SideStickOutput::~SideStickOutput()
{
  DOBS("destructor SideStickOutput");
}
#endif

#if !defined(__DCO_STANDALONE)
void* SideStickOutput::operator new(size_t size)
{
  DOBS("operator new SideStickOutput");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SideStickOutput));
  return my_arena->alloc(size);
}

void SideStickOutput::operator delete(void* v)
{
  DOBS("operator delete SideStickOutput");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SideStickOutput));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void SideStickOutput::packDataDiff(::dueca::AmorphStore& s, const SideStickOutput& ref) const
{
  DOBS("packDataDiff SideStickOutput");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->pitch_fwd_pos, ref.pitch_fwd_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_fwd_vel, ref.pitch_fwd_vel,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_act_force, ref.pitch_act_force,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_cable_force, ref.pitch_cable_force,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_trim_pos, ref.pitch_trim_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_aft_pos, ref.pitch_aft_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_act_pos, ref.pitch_act_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_fwd_pos, ref.roll_fwd_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_fwd_vel, ref.roll_fwd_vel,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_act_force, ref.roll_act_force,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_cable_force, ref.roll_cable_force,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_trim_pos, ref.roll_trim_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_aft_pos, ref.roll_aft_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_act_pos, ref.roll_act_pos,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void SideStickOutput::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData SideStickOutput");

  ::unPackData(s, this->pitch_fwd_pos);
  ::unPackData(s, this->pitch_fwd_vel);
  ::unPackData(s, this->pitch_act_force);
  ::unPackData(s, this->pitch_cable_force);
  ::unPackData(s, this->pitch_trim_pos);
  ::unPackData(s, this->pitch_aft_pos);
  ::unPackData(s, this->pitch_act_pos);
  ::unPackData(s, this->roll_fwd_pos);
  ::unPackData(s, this->roll_fwd_vel);
  ::unPackData(s, this->roll_act_force);
  ::unPackData(s, this->roll_cable_force);
  ::unPackData(s, this->roll_trim_pos);
  ::unPackData(s, this->roll_aft_pos);
  ::unPackData(s, this->roll_act_pos);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void SideStickOutput::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff SideStickOutput");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->pitch_fwd_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_fwd_vel, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_act_force, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_cable_force, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_trim_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_aft_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_act_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_fwd_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_fwd_vel, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_act_force, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_cable_force, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_trim_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_aft_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_act_pos, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool SideStickOutput::operator == (const SideStickOutput& other) const
{
  DOBS("operator == SideStickOutput");
  if (this->pitch_fwd_pos != other.pitch_fwd_pos) return false;
  if (this->pitch_fwd_vel != other.pitch_fwd_vel) return false;
  if (this->pitch_act_force != other.pitch_act_force) return false;
  if (this->pitch_cable_force != other.pitch_cable_force) return false;
  if (this->pitch_trim_pos != other.pitch_trim_pos) return false;
  if (this->pitch_aft_pos != other.pitch_aft_pos) return false;
  if (this->pitch_act_pos != other.pitch_act_pos) return false;
  if (this->roll_fwd_pos != other.roll_fwd_pos) return false;
  if (this->roll_fwd_vel != other.roll_fwd_vel) return false;
  if (this->roll_act_force != other.roll_act_force) return false;
  if (this->roll_cable_force != other.roll_cable_force) return false;
  if (this->roll_trim_pos != other.roll_trim_pos) return false;
  if (this->roll_aft_pos != other.roll_aft_pos) return false;
  if (this->roll_act_pos != other.roll_act_pos) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
SideStickOutput&
SideStickOutput::operator=(const SideStickOutput& other)
{
  DOBS("operator = SideStickOutput");
  if (this == &other) return *this;
  this->pitch_fwd_pos = other.pitch_fwd_pos;
  this->pitch_fwd_vel = other.pitch_fwd_vel;
  this->pitch_act_force = other.pitch_act_force;
  this->pitch_cable_force = other.pitch_cable_force;
  this->pitch_trim_pos = other.pitch_trim_pos;
  this->pitch_aft_pos = other.pitch_aft_pos;
  this->pitch_act_pos = other.pitch_act_pos;
  this->roll_fwd_pos = other.roll_fwd_pos;
  this->roll_fwd_vel = other.roll_fwd_vel;
  this->roll_act_force = other.roll_act_force;
  this->roll_cable_force = other.roll_cable_force;
  this->roll_trim_pos = other.roll_trim_pos;
  this->roll_aft_pos = other.roll_aft_pos;
  this->roll_act_pos = other.roll_act_pos;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void SideStickOutput::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData SideStickOutput");
  ::packData(s, this->pitch_fwd_pos);
  ::packData(s, this->pitch_fwd_vel);
  ::packData(s, this->pitch_act_force);
  ::packData(s, this->pitch_cable_force);
  ::packData(s, this->pitch_trim_pos);
  ::packData(s, this->pitch_aft_pos);
  ::packData(s, this->pitch_act_pos);
  ::packData(s, this->roll_fwd_pos);
  ::packData(s, this->roll_fwd_vel);
  ::packData(s, this->roll_act_force);
  ::packData(s, this->roll_cable_force);
  ::packData(s, this->roll_trim_pos);
  ::packData(s, this->roll_aft_pos);
  ::packData(s, this->roll_act_pos);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & SideStickOutput::print(std::ostream& s) const
{
  s << "SideStickOutput("
    << "pitch_fwd_pos=" << this->pitch_fwd_pos << ','
    << "pitch_fwd_vel=" << this->pitch_fwd_vel << ','
    << "pitch_act_force=" << this->pitch_act_force << ','
    << "pitch_cable_force=" << this->pitch_cable_force << ','
    << "pitch_trim_pos=" << this->pitch_trim_pos << ','
    << "pitch_aft_pos=" << this->pitch_aft_pos << ','
    << "pitch_act_pos=" << this->pitch_act_pos << ','
    << "roll_fwd_pos=" << this->roll_fwd_pos << ','
    << "roll_fwd_vel=" << this->roll_fwd_vel << ','
    << "roll_act_force=" << this->roll_act_force << ','
    << "roll_cable_force=" << this->roll_cable_force << ','
    << "roll_trim_pos=" << this->roll_trim_pos << ','
    << "roll_aft_pos=" << this->roll_aft_pos << ','
    << "roll_act_pos=" << this->roll_act_pos
    << ')';
  return s;
}
#endif


