/* ------------------------------------------------------------------ */
/*      item            : SideStickInput.cxx
        generated by    : matteo (matteo)
        date            : Thu 24 Mar 2022
        category        : body file
        description     : DUECA Communication Object (DCO),
                          automatically generated by dueca-codegen
        codegen version : 110
        language        : C++
*/

#include "SideStickInput.hxx"
#include <iostream>
#include <cassert>
#if !defined(__DCO_NOPACK)
#include <AmorphStore.hxx>
#include <PackUnpackTemplates.hxx>
#endif
#include <DataWriterArraySize.hxx>
#define DOBS(A)
#if !defined(__DCO_STANDALONE)
#include <Arena.hxx>
#include <ArenaPool.hxx>
#include <DataClassRegistrar.hxx>
#include <CommObjectMemberAccess.hxx>
#include <DCOFunctor.hxx>
#include <DCOMetaFunctor.hxx>

#define DO_INSTANTIATE
#include <DataSetSubsidiary.hxx>
#endif




#if !defined(__DCO_STANDALONE)
// static CommObjectMemberAccess objects, that can provide flexible access
// to the members of a SideStickInput object
static ::dueca::CommObjectMemberAccess
  <SideStickInput,int >
  SideStickInput_member_use_pitch_params(&SideStickInput::use_pitch_params, "use_pitch_params");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_friction(&SideStickInput::pitch_friction, "pitch_friction");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_jam_pos(&SideStickInput::pitch_jam_pos, "pitch_jam_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_pos_stop(&SideStickInput::pitch_pos_stop, "pitch_pos_stop");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_neg_stop(&SideStickInput::pitch_neg_stop, "pitch_neg_stop");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_mass(&SideStickInput::pitch_mass, "pitch_mass");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_damping(&SideStickInput::pitch_damping, "pitch_damping");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_force(&SideStickInput::pitch_force, "pitch_force");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_switch(&SideStickInput::pitch_switch, "pitch_switch");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_trim_vel(&SideStickInput::pitch_trim_vel, "pitch_trim_vel");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_pitch_init_trim_pos(&SideStickInput::pitch_init_trim_pos, "pitch_init_trim_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,int >
  SideStickInput_member_use_roll_params(&SideStickInput::use_roll_params, "use_roll_params");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_friction(&SideStickInput::roll_friction, "roll_friction");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_jam_pos(&SideStickInput::roll_jam_pos, "roll_jam_pos");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_pos_stop(&SideStickInput::roll_pos_stop, "roll_pos_stop");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_neg_stop(&SideStickInput::roll_neg_stop, "roll_neg_stop");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_mass(&SideStickInput::roll_mass, "roll_mass");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_damping(&SideStickInput::roll_damping, "roll_damping");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_force(&SideStickInput::roll_force, "roll_force");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_switch(&SideStickInput::roll_switch, "roll_switch");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_trim_vel(&SideStickInput::roll_trim_vel, "roll_trim_vel");
static ::dueca::CommObjectMemberAccess
  <SideStickInput,float >
  SideStickInput_member_roll_init_trim_pos(&SideStickInput::roll_init_trim_pos, "roll_init_trim_pos");

// assemble the above entries into a table in the order in which they
// appear in the SideStickInput object
static const ::dueca::CommObjectDataTable entriestable[] = {
  { &SideStickInput_member_use_pitch_params },
  { &SideStickInput_member_pitch_friction },
  { &SideStickInput_member_pitch_jam_pos },
  { &SideStickInput_member_pitch_pos_stop },
  { &SideStickInput_member_pitch_neg_stop },
  { &SideStickInput_member_pitch_mass },
  { &SideStickInput_member_pitch_damping },
  { &SideStickInput_member_pitch_force },
  { &SideStickInput_member_pitch_switch },
  { &SideStickInput_member_pitch_trim_vel },
  { &SideStickInput_member_pitch_init_trim_pos },
  { &SideStickInput_member_use_roll_params },
  { &SideStickInput_member_roll_friction },
  { &SideStickInput_member_roll_jam_pos },
  { &SideStickInput_member_roll_pos_stop },
  { &SideStickInput_member_roll_neg_stop },
  { &SideStickInput_member_roll_mass },
  { &SideStickInput_member_roll_damping },
  { &SideStickInput_member_roll_force },
  { &SideStickInput_member_roll_switch },
  { &SideStickInput_member_roll_trim_vel },
  { &SideStickInput_member_roll_init_trim_pos },
  { NULL }
};

#endif

// class name, static
const char * const SideStickInput::classname = "SideStickInput";

// magic number, hashed from class name and member names / classes
const uint32_t SideStickInput::magic_check_number=0xec1f192;

#if !defined(__DCO_STANDALONE)
// functor table, provides access to user-defined metafunctions through the
// data class registry
static dueca::functortable_type functortable;

// register this class, provides access to a packing/unpacking object,
// and to the member access tables
static ::dueca::DataClassRegistrar registrar
  (SideStickInput::classname, NULL,
   entriestable, &functortable,
   new ::dueca::DataSetSubsidiary<SideStickInput>());

#endif

#ifndef __CUSTOM_DEFAULT_CONSTRUCTOR
SideStickInput::SideStickInput():
    use_pitch_params(0),
    pitch_friction(0),
    pitch_jam_pos(0),
    pitch_pos_stop(0),
    pitch_neg_stop(0),
    pitch_mass(0),
    pitch_damping(0),
    pitch_force(0),
    pitch_switch(0),
    pitch_trim_vel(0),
    pitch_init_trim_pos(0),
    use_roll_params(0),
    roll_friction(0),
    roll_jam_pos(0),
    roll_pos_stop(0),
    roll_neg_stop(0),
    roll_mass(0),
    roll_damping(0),
    roll_force(0),
    roll_switch(0),
    roll_trim_vel(0),
    roll_init_trim_pos(0)
{
  DOBS("default constructor SideStickInput");
}
#endif

#ifndef __CUSTOM_FULL_CONSTRUCTOR
SideStickInput::SideStickInput(
        const int& use_pitch_params,
        const float& pitch_friction,
        const float& pitch_jam_pos,
        const float& pitch_pos_stop,
        const float& pitch_neg_stop,
        const float& pitch_mass,
        const float& pitch_damping,
        const float& pitch_force,
        const float& pitch_switch,
        const float& pitch_trim_vel,
        const float& pitch_init_trim_pos,
        const int& use_roll_params,
        const float& roll_friction,
        const float& roll_jam_pos,
        const float& roll_pos_stop,
        const float& roll_neg_stop,
        const float& roll_mass,
        const float& roll_damping,
        const float& roll_force,
        const float& roll_switch,
        const float& roll_trim_vel,
        const float& roll_init_trim_pos) :
    use_pitch_params(use_pitch_params),
    pitch_friction(pitch_friction),
    pitch_jam_pos(pitch_jam_pos),
    pitch_pos_stop(pitch_pos_stop),
    pitch_neg_stop(pitch_neg_stop),
    pitch_mass(pitch_mass),
    pitch_damping(pitch_damping),
    pitch_force(pitch_force),
    pitch_switch(pitch_switch),
    pitch_trim_vel(pitch_trim_vel),
    pitch_init_trim_pos(pitch_init_trim_pos),
    use_roll_params(use_roll_params),
    roll_friction(roll_friction),
    roll_jam_pos(roll_jam_pos),
    roll_pos_stop(roll_pos_stop),
    roll_neg_stop(roll_neg_stop),
    roll_mass(roll_mass),
    roll_damping(roll_damping),
    roll_force(roll_force),
    roll_switch(roll_switch),
    roll_trim_vel(roll_trim_vel),
    roll_init_trim_pos(roll_init_trim_pos)
{
  DOBS("complete constructor SideStickInput");
}
#endif

#ifndef __CUSTOM_FULLSINGLES_CONSTRUCTOR
#endif

#ifndef __CUSTOM_COPY_CONSTRUCTOR
SideStickInput::SideStickInput(const SideStickInput& other):
    use_pitch_params(other.use_pitch_params),
    pitch_friction(other.pitch_friction),
    pitch_jam_pos(other.pitch_jam_pos),
    pitch_pos_stop(other.pitch_pos_stop),
    pitch_neg_stop(other.pitch_neg_stop),
    pitch_mass(other.pitch_mass),
    pitch_damping(other.pitch_damping),
    pitch_force(other.pitch_force),
    pitch_switch(other.pitch_switch),
    pitch_trim_vel(other.pitch_trim_vel),
    pitch_init_trim_pos(other.pitch_init_trim_pos),
    use_roll_params(other.use_roll_params),
    roll_friction(other.roll_friction),
    roll_jam_pos(other.roll_jam_pos),
    roll_pos_stop(other.roll_pos_stop),
    roll_neg_stop(other.roll_neg_stop),
    roll_mass(other.roll_mass),
    roll_damping(other.roll_damping),
    roll_force(other.roll_force),
    roll_switch(other.roll_switch),
    roll_trim_vel(other.roll_trim_vel),
    roll_init_trim_pos(other.roll_init_trim_pos)
{
  DOBS("copy constructor SideStickInput");
}
#endif

#if !defined(__CUSTOM_AMORPHRESTORE_CONSTRUCTOR) && !defined(__DCO_NOPACK)
SideStickInput::SideStickInput(dueca::AmorphReStore& s):
        use_pitch_params(s),
        pitch_friction(s),
        pitch_jam_pos(s),
        pitch_pos_stop(s),
        pitch_neg_stop(s),
        pitch_mass(s),
        pitch_damping(s),
        pitch_force(s),
        pitch_switch(s),
        pitch_trim_vel(s),
        pitch_init_trim_pos(s),
        use_roll_params(s),
        roll_friction(s),
        roll_jam_pos(s),
        roll_pos_stop(s),
        roll_neg_stop(s),
        roll_mass(s),
        roll_damping(s),
        roll_force(s),
        roll_switch(s),
        roll_trim_vel(s),
        roll_init_trim_pos(s)
{
  DOBS("amorph constructor SideStickInput");
}
#endif

#if !defined(__CUSTOM_ARRAY_SIZE_INIT_CONSTRUCTOR)
#endif

#ifndef __CUSTOM_DESTRUCTOR
SideStickInput::~SideStickInput()
{
  DOBS("destructor SideStickInput");
}
#endif

#if !defined(__DCO_STANDALONE)
void* SideStickInput::operator new(size_t size)
{
  DOBS("operator new SideStickInput");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SideStickInput));
  return my_arena->alloc(size);
}

void SideStickInput::operator delete(void* v)
{
  DOBS("operator delete SideStickInput");
  static ::dueca::Arena* my_arena = arena_pool.findArena
    (sizeof(SideStickInput));
  my_arena->free(v);
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATADIFF) && !defined(__DCO_NOPACK)
void SideStickInput::packDataDiff(::dueca::AmorphStore& s, const SideStickInput& ref) const
{
  DOBS("packDataDiff SideStickInput");
  ::dueca::IndexMemory im;
  ::dueca::checkandpackdiffsingle(this->use_pitch_params, ref.use_pitch_params,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_friction, ref.pitch_friction,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_jam_pos, ref.pitch_jam_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_pos_stop, ref.pitch_pos_stop,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_neg_stop, ref.pitch_neg_stop,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_mass, ref.pitch_mass,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_damping, ref.pitch_damping,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_force, ref.pitch_force,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_switch, ref.pitch_switch,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_trim_vel, ref.pitch_trim_vel,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->pitch_init_trim_pos, ref.pitch_init_trim_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->use_roll_params, ref.use_roll_params,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_friction, ref.roll_friction,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_jam_pos, ref.roll_jam_pos,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_pos_stop, ref.roll_pos_stop,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_neg_stop, ref.roll_neg_stop,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_mass, ref.roll_mass,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_damping, ref.roll_damping,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_force, ref.roll_force,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_switch, ref.roll_switch,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_trim_vel, ref.roll_trim_vel,
                         s, im);
  ::dueca::checkandpackdiffsingle(this->roll_init_trim_pos, ref.roll_init_trim_pos,
                         s, im);
  im.closeoff(s);
}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATA) && !defined(__DCO_NOPACK)
void SideStickInput::unPackData(::dueca::AmorphReStore& s)
{
  DOBS("unPackData SideStickInput");

  ::unPackData(s, this->use_pitch_params);
  ::unPackData(s, this->pitch_friction);
  ::unPackData(s, this->pitch_jam_pos);
  ::unPackData(s, this->pitch_pos_stop);
  ::unPackData(s, this->pitch_neg_stop);
  ::unPackData(s, this->pitch_mass);
  ::unPackData(s, this->pitch_damping);
  ::unPackData(s, this->pitch_force);
  ::unPackData(s, this->pitch_switch);
  ::unPackData(s, this->pitch_trim_vel);
  ::unPackData(s, this->pitch_init_trim_pos);
  ::unPackData(s, this->use_roll_params);
  ::unPackData(s, this->roll_friction);
  ::unPackData(s, this->roll_jam_pos);
  ::unPackData(s, this->roll_pos_stop);
  ::unPackData(s, this->roll_neg_stop);
  ::unPackData(s, this->roll_mass);
  ::unPackData(s, this->roll_damping);
  ::unPackData(s, this->roll_force);
  ::unPackData(s, this->roll_switch);
  ::unPackData(s, this->roll_trim_vel);
  ::unPackData(s, this->roll_init_trim_pos);

}
#endif

#if !defined(__CUSTOM_FUNCTION_UNPACKDATADIFF) && !defined(__DCO_NOPACK)
void SideStickInput::unPackDataDiff(dueca::AmorphReStore& s)
{
  DOBS("unPackDataDiff SideStickInput");
  ::dueca::IndexRecall im;
  ::dueca::checkandunpackdiffsingle(this->use_pitch_params, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_friction, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_jam_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_pos_stop, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_neg_stop, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_mass, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_damping, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_force, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_switch, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_trim_vel, s, im);
  ::dueca::checkandunpackdiffsingle(this->pitch_init_trim_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->use_roll_params, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_friction, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_jam_pos, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_pos_stop, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_neg_stop, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_mass, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_damping, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_force, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_switch, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_trim_vel, s, im);
  ::dueca::checkandunpackdiffsingle(this->roll_init_trim_pos, s, im);
}
#endif

#ifndef __CUSTOM_OPERATOR_EQUAL
bool SideStickInput::operator == (const SideStickInput& other) const
{
  DOBS("operator == SideStickInput");
  if (this->use_pitch_params != other.use_pitch_params) return false;
  if (this->pitch_friction != other.pitch_friction) return false;
  if (this->pitch_jam_pos != other.pitch_jam_pos) return false;
  if (this->pitch_pos_stop != other.pitch_pos_stop) return false;
  if (this->pitch_neg_stop != other.pitch_neg_stop) return false;
  if (this->pitch_mass != other.pitch_mass) return false;
  if (this->pitch_damping != other.pitch_damping) return false;
  if (this->pitch_force != other.pitch_force) return false;
  if (this->pitch_switch != other.pitch_switch) return false;
  if (this->pitch_trim_vel != other.pitch_trim_vel) return false;
  if (this->pitch_init_trim_pos != other.pitch_init_trim_pos) return false;
  if (this->use_roll_params != other.use_roll_params) return false;
  if (this->roll_friction != other.roll_friction) return false;
  if (this->roll_jam_pos != other.roll_jam_pos) return false;
  if (this->roll_pos_stop != other.roll_pos_stop) return false;
  if (this->roll_neg_stop != other.roll_neg_stop) return false;
  if (this->roll_mass != other.roll_mass) return false;
  if (this->roll_damping != other.roll_damping) return false;
  if (this->roll_force != other.roll_force) return false;
  if (this->roll_switch != other.roll_switch) return false;
  if (this->roll_trim_vel != other.roll_trim_vel) return false;
  if (this->roll_init_trim_pos != other.roll_init_trim_pos) return false;
  return true;
}
#endif

#ifndef __CUSTOM_OPERATOR_ASSIGN
SideStickInput&
SideStickInput::operator=(const SideStickInput& other)
{
  DOBS("operator = SideStickInput");
  if (this == &other) return *this;
  this->use_pitch_params = other.use_pitch_params;
  this->pitch_friction = other.pitch_friction;
  this->pitch_jam_pos = other.pitch_jam_pos;
  this->pitch_pos_stop = other.pitch_pos_stop;
  this->pitch_neg_stop = other.pitch_neg_stop;
  this->pitch_mass = other.pitch_mass;
  this->pitch_damping = other.pitch_damping;
  this->pitch_force = other.pitch_force;
  this->pitch_switch = other.pitch_switch;
  this->pitch_trim_vel = other.pitch_trim_vel;
  this->pitch_init_trim_pos = other.pitch_init_trim_pos;
  this->use_roll_params = other.use_roll_params;
  this->roll_friction = other.roll_friction;
  this->roll_jam_pos = other.roll_jam_pos;
  this->roll_pos_stop = other.roll_pos_stop;
  this->roll_neg_stop = other.roll_neg_stop;
  this->roll_mass = other.roll_mass;
  this->roll_damping = other.roll_damping;
  this->roll_force = other.roll_force;
  this->roll_switch = other.roll_switch;
  this->roll_trim_vel = other.roll_trim_vel;
  this->roll_init_trim_pos = other.roll_init_trim_pos;
  return *this;
}
#endif

#if !defined(__CUSTOM_FUNCTION_PACKDATA) && !defined(__DCO_NOPACK)
void SideStickInput::packData(::dueca::AmorphStore& s) const
{
  DOBS("packData SideStickInput");
  ::packData(s, this->use_pitch_params);
  ::packData(s, this->pitch_friction);
  ::packData(s, this->pitch_jam_pos);
  ::packData(s, this->pitch_pos_stop);
  ::packData(s, this->pitch_neg_stop);
  ::packData(s, this->pitch_mass);
  ::packData(s, this->pitch_damping);
  ::packData(s, this->pitch_force);
  ::packData(s, this->pitch_switch);
  ::packData(s, this->pitch_trim_vel);
  ::packData(s, this->pitch_init_trim_pos);
  ::packData(s, this->use_roll_params);
  ::packData(s, this->roll_friction);
  ::packData(s, this->roll_jam_pos);
  ::packData(s, this->roll_pos_stop);
  ::packData(s, this->roll_neg_stop);
  ::packData(s, this->roll_mass);
  ::packData(s, this->roll_damping);
  ::packData(s, this->roll_force);
  ::packData(s, this->roll_switch);
  ::packData(s, this->roll_trim_vel);
  ::packData(s, this->roll_init_trim_pos);
}
#endif

#ifndef __CUSTOM_FUNCTION_PRINT
std::ostream & SideStickInput::print(std::ostream& s) const
{
  s << "SideStickInput("
    << "use_pitch_params=" << this->use_pitch_params << ','
    << "pitch_friction=" << this->pitch_friction << ','
    << "pitch_jam_pos=" << this->pitch_jam_pos << ','
    << "pitch_pos_stop=" << this->pitch_pos_stop << ','
    << "pitch_neg_stop=" << this->pitch_neg_stop << ','
    << "pitch_mass=" << this->pitch_mass << ','
    << "pitch_damping=" << this->pitch_damping << ','
    << "pitch_force=" << this->pitch_force << ','
    << "pitch_switch=" << this->pitch_switch << ','
    << "pitch_trim_vel=" << this->pitch_trim_vel << ','
    << "pitch_init_trim_pos=" << this->pitch_init_trim_pos << ','
    << "use_roll_params=" << this->use_roll_params << ','
    << "roll_friction=" << this->roll_friction << ','
    << "roll_jam_pos=" << this->roll_jam_pos << ','
    << "roll_pos_stop=" << this->roll_pos_stop << ','
    << "roll_neg_stop=" << this->roll_neg_stop << ','
    << "roll_mass=" << this->roll_mass << ','
    << "roll_damping=" << this->roll_damping << ','
    << "roll_force=" << this->roll_force << ','
    << "roll_switch=" << this->roll_switch << ','
    << "roll_trim_vel=" << this->roll_trim_vel << ','
    << "roll_init_trim_pos=" << this->roll_init_trim_pos
    << ')';
  return s;
}
#endif


